export const dou2 = [
  {
    question:
      'Назвіть переваги Node.js, якщо порівнювати з іншими технологіями для розробки серверних застосунків.',
    answer:
      'Швидкодія: Асинхронні операції дозволяють оптимізувати роботу з багатоопераційними завданнями.\nОдномовний JavaScript: Всі рівні (фронтенд та бекенд) можуть використовувати одну мову - JavaScript.\nВелика спільнота: Широкий вибір бібліотек і модулів, активна спільнота.',
  },
  {
    question:
      'Для яких задач ви використали б кілька процесів/потоків (processes/threads)?',
    answer:
      'CPU-інтенсивні завдання, які можуть бути розділені на багато частин.\nЗавдання з великим обсягом обчислень, які можна паралелити.',
  },
  {
    question:
      'У чому полягає різниця паралельного та асинхронного програмування на прикладі серверних застосунків?',
    answer:
      'Паралельне - виконання багатьох задач одночасно, асинхронне - без блокування інших операцій.\nПаралельне може вимагати багатьох потоків або процесів, а асинхронне використовує один потік з non-blocking операціями.',
  },
  {
    question: 'Які типи асинхронних операцій здатен виконувати Node.js?',
    answer:
      'Зчитування/запис файлів.\nРобота з мережевими запитами (HTTP, TCP, UDP).\nОперації з базами даних.',
  },
  {
    question: 'Які модулі Node.js ви знаєте? Яке їхнє основне призначення?',
    answer:
      'fs - робота з файловою системою.\nhttp - створення веб-серверів.\nevents - робота з подіями.\nos - інформація про операційну систему та апаратне забезпечення.',
  },
  {
    question:
      'Яка різниця між операційними помилками та помилками програміста?',
    answer:
      "Операційні помилки виникають через невірну конфігурацію або обставини (наприклад, втрата з'єднання).\nПомилки програміста - це програмні баги, які виникають через некоректний код.",
  },
  {
    question: 'Які сервіси можна використати для моніторингу і логування?',
    answer:
      'Логування: Winston, Bunyan, Pino.\nМоніторинг: Prometheus, Grafana, New Relic.',
  },
  {
    question: 'Що таке libuv? Назвіть його складові.',
    answer:
      'libuv - це бібліотека для подійного введення-виведення, що використовується Node.js.\nСкладові libuv: цикл подій, робочий пул, мережевий стек, файловий стек.',
  },
  {
    question: 'Які існують шаблони розподілених транзакцій?',
    answer: '2PC (Two-Phase Commit)\n3PC (Three-Phase Commit)\nSaga pattern',
  },
  {
    question:
      'Чи можливо програмно контролювати виділення і звільнення пам’яті в Node.js програмі?',
    answer:
      "JavaScript-розробники не керують пам'яттю, бо це обов'язок вбудованого механізму Garbage Collector.",
  },
  {
    question: 'Поясніть, що таке Garbage Collector.',
    answer:
      "Garbage Collector - це механізм, що автоматично видаляє непотрібні об'єкти з пам'яті для уникнення витоків пам'яті.",
  },
  {
    question: 'Що означає «витік пам’яті» процеса? Як цьому запобігти?',
    answer:
      "Витік пам'яті - це ситуація, коли програма не вивільняє пам'ять після закінчення використання об'єктів. Для запобігання потрібно коректно вивільняти ресурси.",
  },
  {
    question: 'Як налагодити heap out of memory?',
    answer:
      "Heap Out of Memory - помилка, яка виникає, коли великий обсяг пам'яті в heap вичерпується. Можна збільшити ліміт пам'яті або оптимізувати код.",
  },
  {
    question: 'Як налаштувати кешування?',
    answer:
      "Кешування - зберігання даних в оперативній пам'яті для швидкого доступу. Можна налаштовувати за допомогою бібліотеки cache.",
  },
  {
    question:
      'Які є варіанти використання модулів child_process, worker_threads і cluster?',
    answer:
      'child_process - створення нових процесів.\nworker_threads - створення потоків.\ncluster - кластеризація для балансування навантаження.',
  },
  {
    question: 'Яка різниця у використанні ES modules і CommonJS модулів?',
    answer:
      'Різниця між ES modules і CommonJS:\nES modules - стандарт ECMAScript для імпорту та експорту модулів.\nCommonJS - старий стандарт Node.js з require та module.exports.',
  },
  {
    question:
      'Для чого і як використовують клас EventEmitter з базового модуля ’node:events’?',
    answer:
      "EventEmitter в Node.js - це клас для створення та обробки подій. Використовується для побудови власних об'єктів, які генерують і слухають події.",
  },
  {
    question:
      'Скільки ядер процесора залучені при виконанні Node.js програми за замовчуванням?',
    answer:
      'Ядра процесора у Node.js - за замовчуванням одне ядро. Можна використовувати cluster для багатоядерних систем.',
  },
  {
    question:
      'Що таке middleware? Якщо ми пишемо свій middleware, чому саме там, чому не в коді сервісу?',
    answer:
      'Middleware - це функції, які обробляють запити на сервері. Зазвичай вони використовуються для обробки і модифікації даних перед відправленням відповіді.',
  },
  {
    question: 'Що таке EventEmitter в Node.js?',
    answer:
      "EventEmitter в Node.js - це клас для створення та обробки подій. Використовується для побудови власних об'єктів, які генерують і слухають події.",
  },
  {
    question: 'Яке призначення файлу package.json для Node.js проєктів?',
    answer:
      'package.json - це файл конфігурації проекту Node.js, який містить інформацію про залежності, скрипти, автора та інше.',
  },
  {
    question:
      'Як можна за допомогою Node.js app прочитати файл з логами із файлової системи? Як прочитати файл, який займає понад 300 мегабайтів?',
    answer:
      "Читання файлу з логами в Node.js - можна використовувати fs модуль. Для файлів розміром понад 300 МБ рекомендується використовувати потоки (streams) для оптимізації пам'яті.",
  },
  {
    question: 'Поясніть цикл подій у Node.js.',
    answer:
      'Цикл подій у Node.js - це механізм, який обробляє асинхронні операції та події в Node.js, використовуючи чергу подій та обробники.',
  },
  {
    question: 'Що таке і навіщо потрібен Thread Pool (Worker Pool)?',
    answer:
      'Thread Pool (Worker Pool) - це пул потоків, який використовується для виконання CPU-інтенсивних завдань в окремих потоках.',
  },
  {
    question: 'SIGTERM vs SIGINT: які їхні переваги та недоліки?',
    answer:
      'SIGTERM - сигнал для завершення процесу, може бути оброблений для завершення роботи програми.\nSIGINT - сигнал для преривання процесу, зазвичай викликається клавішною комбінацією Ctrl+C. Можна використовувати для граційного завершення.',
  },
  {
    question: 'Що таке backpressure у контексті стримів? Як з цим боротись?',
    answer:
      'Backpressure у стрімах - це ситуація, коли вивід стріма сповільнюється і потрібно контролювати тиск, щоб запобігти переповненню буфера.',
  },
  {
    question:
      'Для чого потрібні stream.PassThrough і pipe (pipeline)? Наведіть приклади використання.',
    answer:
      'stream.PassThrough і pipe - stream.PassThrough - пасивний стрім, pipe - метод для передачі даних з одного стріму в інший.',
  },
  {
    question:
      'Як використовувати події ’data’, ’end’, ’error’, ’finish’ у стримах Node.js?',
    answer:
      'Використання подій у стрімах - події data, end, error, finish використовуються для обробки подій у стрімах.',
  },
  {
    question: 'Як обробити помилки при роботі зі стримами в Node.js?',
    answer:
      'Обробка помилок у стрімах - для обробки помилок використовується обробник події error.',
  },
  {
    question: 'Наведіть приклади роботи зі стримами різних типів.',
    answer:
      'Приклади роботи зі стрімами різних типів - читання/запис файлів, передача даних через HTTP, обробка даних в реальному часі, обробка великих потокових даних.',
  },
  {
    question: 'Чи працювали ви з pino?',
    answer:
      'Pino - це швидкий логгер для Node.js, який дозволяє ефективно логувати події в програмі.',
  },
  {
    question: 'Як описати приєднання до бази даних?',
    answer:
      'Для опису приєднання до бази даних в Nest.js використовуйте модуль TypeOrmModule. Спершу імпортуйте його і визначте параметри підключення, а потім включіть модуль у ваших модулях, використовуючи TypeOrmModule.forRoot() для головного підключення та TypeOrmModule.forFeature() для підключення сутностей.',
  },
  {
    question: 'Як реалізувати свій декоратор валідації?',
    answer:
      'Для створення власного декоратора валідації використовуйте бібліотеку class-validator. Спершу встановіть її (npm install class-validator), а потім створіть свій декоратор.',
  },

  {
    question:
      'Чому в JavaScript не рекомендують робити довгих обчислень у runtime?',
    answer:
      'У JavaScript не рекомендують робити довгих обчислень у runtime, оскільки це може призвести до блокування головного потоку, інтерферувати зі спритністю користувача та зробити програму менш реактивною.',
  },
  {
    question:
      'Чи гарантовано setTimeout викличе функцію через заданий час? Від чого це залежить?',
    answer:
      'setTimeout не гарантує точного виклику функції через заданий час, оскільки це залежить від завантаженості потока виконання. Тобто функція може викликатися з певним затримкою.',
  },
  {
    question: 'Що таке Promises?',
    answer:
      "Promises - це об'єкти, що представляють результат асинхронної операції у майбутньому, яка може бути або виконана (resolved), або відхилена (rejected).",
  },
  {
    question: 'Яка різниця між Promise.allSettled, Promise.race і Promise.any?',
    answer:
      'Promise.allSettled повертає результати всіх переданих промісів, незалежно від їхнього стану. Promise.race повертає результат першого проміса, який завершиться (виконається або відхилиться). Promise.any повертає результат першого успішного проміса (який виконується), ігноруючи помилки.',
  },
  {
    question: 'Що таке callback у JavaScript?',
    answer:
      'Callback у JavaScript - це функція, яка передається як аргумент в іншу функцію та викликається після завершення певної операції або події.',
  },
  {
    question: 'Чи кращі Promises за callback підхід? Чому?',
    answer:
      "Promises зазвичай вважаються кращим підходом порівняно з callback, оскільки дозволяють уникнути 'callback hell' (глибокого вкладення функцій зворотного виклику) і полегшують обробку асинхронних операцій.",
  },
  {
    question: 'Що таке замикання/closure?',
    answer:
      'Замикання (closure) - це функція, яка зберігає доступ до змінних із зовнішнього контексту, в якому вона була створена, навіть після того, як цей контекст вже закінчив свою роботу.',
  },
  {
    question: 'Поясніть переваги та недоліки використання «use strict».',
    answer:
      "Переваги використання 'use strict':\nДопомагає виявити та уникнути потенційних помилок.\nЗабороняє використання зарезервованих слів і функцій без об'явлення.\nПокращує швидкодію JavaScript-коду в деяких випадках.",
  },
  {
    question: 'Наведіть приклад блокування циклу подій.',
    answer:
      "Приклад блокування циклу подій (event loop blocking) може бути, коли велика асинхронна операція виконується безперервно, не дозволяючи іншим подіям оброблятися, і таким чином 'заморожує' програму.",
  },
  {
    question: 'Яка різниця між abstract і interface?',
    answer:
      'Абстрактний клас (abstract class) може містити реалізовані методи, але також може містити абстрактні методи, які потрібно перевизначити в похідних класах. Інтерфейс (interface) містить лише оголошення методів, але не має їх реалізації, і класи, які імплементують інтерфейс, повинні реалізувати всі методи інтерфейсу.',
  },
  {
    question: 'Що таке Web Workers? Для чого їх використовують?',
    answer:
      'Web Workers - це механізм браузера, який дозволяє виконувати JavaScript-код у окремих потоках (workers), що не блокують головний потік браузера. Вони використовуються для виконання обчислень у фоновому режимі, які не мають впливу на відгуковість інтерфейсу.',
  },
  {
    question:
      'Які особливості передачі даними між worker’ами та основним потоком?',
    answer:
      "Особливості передачі даних між worker'ами та основним потоком:\n- Передача даних відбувається через повідомлення.\n- Дані передаються за допомогою серіалізації (JSON або структуризованого клонування).\n- Повернення результатів може здійснюватися через відправку повідомлення назад до основного потоку.",
  },
  {
    question: 'Які обмеження накладаються на потік Web Workers?',
    answer:
      'Обмеження для Web Workers включають в себе відсутність доступу до DOM, обмежену підтримку сторонніх бібліотек та можливість виконувати код тільки з одного джерела (same-origin policy).',
  },
  {
    question:
      'Окрім використання оператора ‘return’, як ще можна повернути результат виконання з функції (процедури)?',
    answer:
      "Повернути результат виконання функції (процедури) можна також через використання об'єкта.",
  },
  {
    question: 'Яка різниця між Monolith/SOA/Microservices?',
    answer:
      "Різниця між Monolith, SOA і Microservices полягає в рівні розчленування програми. Monolith - один великий додаток, SOA - розбиття на сервіси, але зазвичай вони великі і пов'язані, Microservices - більш фінесоване розчленування на дуже малі незалежні сервіси.",
  },
  {
    question: 'Назвіть переваги і недоліки мікросервісної архітектури.',
    answer:
      'Переваги мікросервісної архітектури: масштабованість, незалежність розробки та розгортання, легкість в управлінні, покращена модульність. Недоліки: складність в управлінні мікросервісами, збільшена складність тестування та моніторингу, проблеми зі злагодженістю між сервісами.',
  },
  {
    question:
      'Як забезпечити стійкість і можливість масштабування мікросервісів?',
    answer:
      'Забезпечення стійкості: використовувати механізми обробки помилок, контейнеризацію та оркестрацію, резервне копіювання даних. Масштабованість: використовувати контейнери, оркестратори, автоматизацію масштабування, розподілені бази даних.',
  },
  {
    question: 'Як відстежувати несправності?',
    answer:
      'Використовувати моніторинг та логування, централізовані системи спостереження, системи трейсингу, аналіз логів та метрик.',
  },
  {
    question: 'Що таке CI (безперервна інтеграція)?',
    answer:
      "CI - це практика автоматичної інтеграції змін в коді та автоматичного тестування цих змін перед об'єднанням з основною кодовою базою.",
  },
  {
    question: 'Як використовують Docker?',
    answer:
      'Docker - це платформа для контейнеризації додатків, яка дозволяє упаковувати додатки та їх залежності в контейнери для забезпечення переносимості та легкості управління.',
  },
  {
    question:
      'У чому різниця між blue/green розгортанням і rolling розгортанням.',
    answer:
      'Blue/Green розгортання - це методологія, при якій дві окремі версії додатку (синя і зелена) тримаються окремо, і переключення між ними відбувається одразу. Rolling розгортання - це методологія, при якій нова версія додатку постійно впроваджується, а стара змінюється поступово.',
  },
  {
    question:
      'Як браузер дізнається, яку сторінку завантажити за адресою домену?',
    answer:
      "Браузер дізнається, яку сторінку завантажити за адресою домену через DNS-запит, який розрішує ім'я домену в IP-адресу, а потім відправляє HTTP-запит на цю IP-адресу.",
  },
  {
    question: 'Яка різниця між HTTP і HTTPS?',
    answer:
      "Різниця між HTTP і HTTPS полягає в безпеці з'єднання. HTTPS використовує шифрування для захисту передачі даних між браузером і сервером.",
  },
  {
    question: 'Яким чином HTTPS робить вебзастосунок безпечнішим?',
    answer:
      'HTTPS робить вебзастосунок безпечнішим, шифруючи дані, які передаються через мережу, тим самим унеможливлюючи прослуховування.',
  },
  {
    question: 'Що таке Socket? Яка різниця між Socket і long polling?',
    answer:
      "Socket (соксет) - це технологія реального часу, яка дозволяє встановити постійне з'єднання між клієнтом і сервером для обміну даними в режимі реального часу. Соксети підтримують двонаправлену комунікацію, тобто як клієнт, так і сервер можуть ініціювати передачу даних один одному. Long Polling (довгий опитувальник) - це техніка, при якій клієнт постійно запитує сервер про оновлення, а сервер відповідає, коли дані доступні або після певного часового інтервалу. Long Polling підтримує однонаправлену комунікацію, і клієнт може тільки запитувати сервер.",
  },
  {
    question:
      'Який популярний архітектурний спосіб розробки API ви знаєте? Яка різниця між GraphQL і REST?',
    answer:
      'GraphQL і REST - це способи побудови API. GraphQL надає клієнту можливість запитувати саме ті дані, які йому потрібні, в той час як REST надає фіксовані ресурси з певними URL.',
  },
  {
    question: 'Яким чином ви б спроєктували API для bulk delete?',
    answer:
      "Для bulk delete можна створити API-шлях, який приймає масив ідентифікаторів об'єктів для видалення та виконує видалення цих об'єктів з бази даних або іншого сховища.",
  },
  {
    question: 'Що таке теорема CAP?',
    answer:
      'Теорема CAP (Consistency, Availability, Partition Tolerance) в області розподілених систем визначає, що неможливо одночасно забезпечити повну стійкість до відмов (Availability), консистентність даних (Consistency) і толерантність до розділення мережі (Partition Tolerance) у розподіленій системі. При проектуванні системи потрібно вибирати компроміс між цими трьома властивостями, залежно від конкретних потреб.',
  },
  {
    question:
      'Чим горизонтальне масштабування відрізняється від вертикального масштабування?',
    answer:
      'Горизонтальне масштабування (scaling out) включає в себе додавання нових серверів або інстансів програмного забезпечення для розподілення навантаження. Вертикальне масштабування (scaling up) передбачає збільшення потужності і можливостей існуючого сервера шляхом додавання ресурсів, таких як CPU або RAM.',
  },
  {
    question:
      'Що ви розумієте під балансуванням навантаження? Чому це важливо при проєктуванні системи?',
    answer:
      'Балансування навантаження: Це процес розподілу запитів і навантаження між різними серверами або сервісами у системі з метою забезпечити рівномірну роботу всіх компонентів системи та запобігти перевантаженню одних і недообслуговуванню інших. Важливо для забезпечення стійкості і масштабованості системи.',
  },
  {
    question:
      'Яка концепція sync/async зв’язку між сервісами в архітектурі мікросервісу?',
    answer:
      'Sync/Async зв’язок в архітектурі мікросервісів: Ця концепція вказує на спосіб взаємодії між мікросервісами. Sync (синхронний) зв’язок передбачає очікування відповіді від іншого сервісу без блокування виконання інших завдань. Async (асинхронний) зв’язок дозволяє продовжувати виконання інших завдань, не чекаючи відповіді.',
  },
  {
    question:
      'Які ви знаєте популярні методології реалізації async-зв’язку між сервісами в архітектурі мікросервісу? Які є плюси та мінуси?',
    answer:
      'Популярні методології async-зв’язку в архітектурі мікросервісів: Декілька популярних методів включають в себе використання черг (message queues) для асинхронного обміну повідомленнями, використання патерну "Event-driven" або реактивного програмування, і використання платформи для керування асинхронними запитами, такої як Apache Kafka або RabbitMQ.',
  },
  {
    question: 'Які типи чутливості вебзастосунків ви знаєте?',
    answer:
      'Інформаційна чутливість (наприклад, особисті дані користувачів).\nФінансова чутливість (платежі, банківські дані).\nПравова чутливість (захист від порушення законів і регуляцій).\nІнфраструктурна чутливість (захист від атак на сервери та мережу)',
  },
  {
    question: 'Як захиститися від XSS?',
    answer:
      'Валідація та екранування введеного користувачем вмісту.\nВикористання HTTPOnly та Secure атрибутів для cookie.\nВикористання бібліотек і фреймворків, які автоматично екранують виведений контент.',
  },
  {
    question: 'Як захистити cookie?',
    answer:
      'Використання HTTPOnly та Secure атрибутів для запобігання доступу до cookie через JavaScript та забезпечення передачі тільки по захищеному каналу (HTTPS).\nВикористання SameSite атрибута для обмеження витоку інформації з cookie на інші сайти.',
  },
  {
    question: 'Що таке CORS?',
    answer:
      'CORS (Cross-Origin Resource Sharing): Механізм, який контролює доступ до ресурсів на інших доменах і може бути настроєний на сервері для обмеження або дозволу запитів з інших джерел.',
  },
  {
    question: 'Що таке Content Security Policy?',
    answer:
      'Content Security Policy: Політика безпеки, яка встановлює обмеження на виконання ресурсів (скриптів, стилів, зображень) на сторінці, щоб запобігти атакам, таким як XSS.',
  },
  {
    question: 'Навіщо писати тести?',
    answer:
      'Тести допомагають виявляти помилки та підтверджувати правильність роботи програмного коду.',
  },
  {
    question: 'Чому юніти мають бути базою в піраміді тестування?',
    answer:
      'Юніт-тести перевіряють окремі компоненти програми і є найшвидшими та найменш витратними за ресурсами. Вони допомагають виявляти проблеми на ранніх стадіях розробки.',
  },
  {
    question: 'Для чого потрібне інтеграційне тестування?',
    answer:
      'Інтеграційне тестування перевіряє взаємодію між компонентами системи та виявляє проблеми, які можуть виникнути при їх спільному використанні.',
  },
  {
    question: 'Навіщо потрібне юніт-тестування?',
    answer:
      'Юніт-тести перевіряють окремі функції або методи коду і допомагають забезпечити правильну роботу кожного компонента незалежно від інших.',
  },
  {
    question: 'Навіщо потрібне E2E-тестування?',
    answer:
      'E2E (end-to-end) тести перевіряють повну функціональність системи з точки зору користувача та допомагають виявити проблеми на рівні інтерфейсу.',
  },
  {
    question: 'Наведіть приклад поганих інтеграційних і юніт-тестів.',
    answer:
      'Поганими тестами можуть бути ті, які не враховують всі можливі сценарії взаємодії компонентів, не перевіряють обробку помилок або використовують сталий стан, який робить їх неповторюваними.',
  },
  {
    question:
      'Яким чином ви б протестували складний запит до бази даних у класі репозиторію?',
    answer:
      'Для тестування складного запиту до бази даних можна використовувати юніт-тести з використанням імітації бази даних або тестової бази даних, де можна передавати різні вхідні дані і перевіряти очікувані результати.',
  },
  {
    question:
      'Які б типи/обсяг тестів ви обрали для абсолютно нової системи без будь-яких обмежень з боку замовника?',
    answer:
      'У такому випадку можна включити юніт-тести, інтеграційні тести, E2E-тести, тести на навантаження, тести на безпеку, тести на відмову (failover тести), тести на відновлення, і тести на резервне копіювання для забезпечення різних аспектів якості системи та її надійності.',
  },
  {
    question: 'Що таке транзакції в базах даних? Для чого вони потрібні?',
    answer:
      'Транзакції в базах даних - це логічні операції (наприклад, вставка, оновлення, видалення даних), які виконуються як єдина атомарна одиниця. Вони потрібні для забезпечення цілісності даних та унікальності операцій.',
  },
  {
    question: 'Які рівні ізоляції транзакцій бувають? Плюси і мінуси?',
    answer:
      'Рівні ізоляції транзакцій включають READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ та SERIALIZABLE. Кожен має свої плюси і мінуси відносно рівня доступу до даних і взаємодії з іншими транзакціями.',
  },
  {
    question: 'Що таке foreign key? Яку роль він виконує?',
    answer:
      "Foreign key - це поле в базі даних, яке встановлює зв'язок між таблицями, вказуючи на ключове поле в іншій таблиці. Він використовується для забезпечення цілісності даних та підтримки зв'язків між даними.",
  },
  {
    question: 'Що таке JOIN?',
    answer:
      "JOIN - це операція в SQL для об'єднання даних з двох або більше таблиць за певною умовою.",
  },
  {
    question: 'Чим LEFT відрізняється від INNER?',
    answer:
      'LEFT JOIN повертає всі записи з лівої таблиці та відповідні записи з правої таблиці, якщо вони існують. INNER JOIN повертає лише записи, які мають спільні значення в обох таблицях.',
  },
  {
    question:
      'Які переваги бази даних SQL, якщо порівнювати з базою даних NoSQL?',
    answer:
      'SQL бази даних мають сильну структуру та підтримують складні запити та транзакції, тоді як NoSQL бази даних зазвичай більш гнучкі та підходять для неконсольних даних та потужного масштабування.',
  },
  {
    question:
      'Коли слід використовувати базу даних NoSQL замість реляційної бази даних?',
    answer:
      'Базу даних NoSQL варто використовувати, коли потрібно обробляти великий обсяг даних, де схема може змінюватися, або коли важлива висока швидкодія доступу до даних.',
  },
  {
    question: 'Як індекс бази даних може підвищити продуктивність?',
    answer:
      'Індекси в базі даних підвищують продуктивність, швидко знаходячи потрібні записи. Вони зазвичай застосовуються до ключових полів.',
  },
  {
    question: 'Які мінуси додавання індексів?',
    answer:
      'Мінусами індексів є збільшене зайняття місця на диску та час їхнього побудови під час оновлення даних.',
  },
  {
    question: 'Які типи індексів існують і яка різниця між ними?',
    answer:
      'Типи індексів включають B-дерево, хеш-індекс, повний текст та інші. Вони відрізняються за способом зберігання та ефективністю пошуку.',
  },
  {
    question: 'Що таке властивість ACID у базі даних?',
    answer:
      'Властивість ACID (Atomicity, Consistency, Isolation, Durability) гарантує, що транзакції в базі даних виконуються надійно та безпечно.',
  },
  {
    question: 'Як створити index для бази даних, якщо вона реляційна?',
    answer: 'CREATE INDEX idx_name ON table_name (column_name);',
  },
]
