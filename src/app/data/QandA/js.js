export const js = [
  {
    question: 'Що таке Vanilla JS?',
    answer:
      'Vanilla JavaScript означає використання звичайного JavaScript без додаткових бібліотек чи фреймворків. Це чистий JS.',
  },
  {
    question: "Що таке 'use strict'?",
    answer:
      '"Use strict" - це директива, яка вказує, що код JavaScript повинен виконуватися в "строгому режимі". Вона розміщується на початку коду, і строгий режим забороняє певні дії, такі як використання невизначених змінних.',
  },
  {
    question: 'Яка різниця між var, const і let?',
    answer:
      "До випуску ECMAScript 6 змінні в JavaScript оголошувалися лише ключовим словом var. Var і let мають багато спільного, але різниця полягає в тому, що змінні, оголошені за допомогою let, не можуть бути переоголошені, і, що найважливіше, такі змінні мають обмежений областью видимості, тобто вони доступні лише у блоку {} в якому вони були створені. Var не має області видимості у блоках. Const використовується для оголошення констант. Спроба змінити значення константи призведе до помилки. Це стосується лише зміни цілої константи; ми все ще можемо змінювати поля об'єкта. Щодо області видимості, const веде себе так само, як let; між ними немає різниці. Важливо вказати, що також можливо створювати змінну без використання var, let чи const, але це не рекомендується, і в такому випадку змінна буде мати глобальну область видимості.",
  },
  {
    question: 'Що таке ECMAScript 6?',
    answer:
      'ECMAScript 6 - це значуще оновлення мови JavaScript, яке вийшло у 2015 році. Його зміни стали стандартом і широко використовуються всюди. Він ввів такі функції, як let і const, promises, стрілкові функції, класи та багато інших.',
  },
  {
    question: 'Що таке область видимості (scope)?',
    answer:
      "Область видимості вказує на частину програми, в якій можна отримати доступ до змінних, функцій чи об'єктів. Це може бути функція, блок або весь програмний код в цілому, в якому випадку вона називається глобальною областю видимості - це означає, що ми завжди перебуваємо принаймні в одній області видимості.",
  },
  {
    question: 'JavaScript - це мова зі статичним чи динамічним типізацією?',
    answer:
      'JavaScript є мовою з динамічною типізацією, що означає, що ви не вказуєте тип змінної явно. Під час виконання програми змінна може містити будь-який тип даних, і операції виконуються на основі типу змінної. Результат також може бути автоматично приведений до іншого типу даних (наприклад, операція може повернути рядок "5" замість числа 5). Це іноді може призводити до непередбачуваних помилок у коді. TypeScript, до речі, призначений для вирішення цієї проблеми.',
  },
  {
    question: 'Що таке незмінність (immutability)?',
    answer: "Незмінність вказує на стан об'єкта, який не може бути змінений.",
  },
  {
    question: "Як зробити об'єкт незмінним?",
    answer:
      "Для зроблення об'єкта незмінним можна використовувати метод freeze() об'єкта.",
  },
  {
    question: "Як визначити, чи заморожений об'єкт?",
    answer:
      "Для визначення, чи об'єкт заморожений, тобто незмінний, можна використовувати метод isFrozen().",
  },
  {
    question: 'Які типи даних існують в JS?',
    answer:
      "У JavaScript існує загалом 8 типів даних. До примітивних типів відносяться Undefined, Boolean, Number, String, BigInt та Symbol. Також існує особливий примітивний тип Null, а також структура об'єкта.",
  },
  {
    question: "Як перевірити, чи об'єкт є масивом?",
    answer:
      "Для перевірки, чи об'єкт є масивом, можна використовувати метод isArray(). Він повертає true, якщо об'єкт є масивом, і false, якщо це не масив.",
  },
  {
    question: 'Як перевірити, чи число є скінченним?',
    answer:
      'Щоб визначити, чи число є скінченним, вам потрібно переконатися, що воно не є нескінченістю (+/-Infinity) і не є NaN. Можна використовувати метод Number.isFinite(). Він повертає false, якщо аргумент є NaN, позитивною або негативною нескінченістю (Infinity або -Infinity). В іншому випадку він повертає true.',
  },
  {
    question: 'Що робить метод eval()?',
    answer:
      'Метод eval() дозволяє вам виконувати JavaScript-код, представлений у вигляді рядка. Він повертає значення виконаного коду, наданого у вигляді рядка. Якщо код нічого не повертає, повертається undefined.',
  },
  {
    question: 'Як перевірити, чи змінна дорівнює NaN?',
    answer:
      'Для перевірки на рівність з NaN можна використовувати функцію isNaN. Альтернативно можна використовувати метод Number.isNaN(), введений в ECMAScript 6, або додатково перевіряти літерал чи змінну на наявність нечислового значення за допомогою typeof.',
  },
  {
    question: 'Яка різниця у поведінці між isNaN() та Number.isNaN()?',
    answer:
      'Глобальна функція isNaN() конвертує перевіряюче значення у число, а потім перевіряє його. Метод Number.isNaN() не конвертує значення у число і не повертає true для значень, які не є числовими. Загалом, рекомендується використовувати метод Number.isNaN().',
  },
  {
    question: 'Що таке негайно викликана функція-вираз (IIFE)?',
    answer:
      'Це функція JavaScript, яка виконується негайно після свого визначення.',
  },
  {
    question: 'Що таке деструктуризація?',
    answer:
      "Деструктуризація - це спеціальний синтаксис присвоєння, який дозволяє витягти значення з масивів або об'єктів і присвоїти їх змінним більш компактним способом.",
  },
  {
    question: 'Яка різниця між оператором "in" і методом hasOwnProperty?',
    answer:
      "Кожен об'єкт, який походить від Object, успадковує метод hasOwnProperty. Цей метод може бути використаний для визначення того, чи має об'єкт певну властивість як власну властивість. На відміну від оператора \"in\", цей метод не перевіряє наявність властивості в прототипному ланцюжку об'єкта.",
  },
  {
    question: 'Як перевірити, чи існує підстрока в рядку?',
    answer:
      'Метод includes() перевіряє, чи містить рядок певну підстроку і повертає true чи false відповідно.',
  },
  {
    question: 'Що таке Темпоральна Зона Підняття?',
    answer:
      'Темпоральна Зона Підняття - це термін, який використовується для опису стану, коли змінні не доступні. Вони знаходяться в області видимості, але ще не були оголошені.',
  },
  {
    question: 'Що таке замикання (closure) в JavaScript?',
    answer:
      "Замикання - це функція, яка пам'ятає свої зовнішні змінні і може отримувати доступ до них.",
  },
  {
    question: 'Які цілі мають методи setTimeout та setInterval?',
    answer:
      'Ці методи дозволяють викликати функцію після певної затримки (асинхронно). setTimeout виконує функцію один раз, а setInterval виконує її періодично через задані інтервали часу.',
  },
  {
    question: 'Що таке черги та стеки?',
    answer:
      'Це структури даних. Стек працює за принципом "останній відзначений, першим знятий" (LIFO), що означає, що останній елемент, доданий, перший видаляється. З іншого боку, черга працює за принципом "перший відзначений, першим знятий" (FIFO), де перший елемент, доданий, перший видаляється.',
  },
  {
    question: 'Як JavaScript виконує код?',
    answer:
      'JavaScript виконує код синхронно, послідовно, рядок за рядком. Перед виконанням рядка коду інтерпретатор розміщує його в стеку викликів. Стек викликів - це місце, де код аналізується і виконується. Після виконання рядка він видаляється зі стеку, і інтерпретатор переходить до наступного рядка.',
  },
  {
    question: 'Що таке подійний цикл (event loop)?',
    answer:
      "Подійний цикл - це нескінченний цикл, в якому двигун JavaScript очікує завдань, виконує їх і очікує нових завдань. Основне завдання подійного циклу - керувати стеком викликів та чергою зворотних викликів. JavaScript залишається бездіяльним і очікує завдань. Як тільки завдання з'являються, двигун починає їх виконувати, починаючи з першого. Якщо нове завдання приходить, коли двигун зайнятий попереднім завданням, воно розміщується в черзі.",
  },
  {
    question: 'Що таке посилальні (reference) типи?',
    answer:
      "Посилальні типи - це об'єкти, включаючи Object, Array та Function. Змінна, яка містить посилальний тип, фактично не містить саме значення, але лише посилання на місце в пам'яті, де зберігаються фактичні дані.",
  },
  {
    question: "Як можна клонувати об'єкт?",
    answer:
      "Для клонування об'єкта можна використовувати метод Object.assign або оператор spread (...). Однак, якщо вам потрібно скопіювати об'єкт з вкладеними об'єктами, ці методи можуть не працювати. Можна використовувати метод з бібліотеки, такої як Lodash, або робити це за допомогою вбудованого об'єкта JSON.",
  },
  {
    question: 'Як можна додати елемент в початок та кінець масиву?',
    answer:
      'Для додавання елементу в початок масиву можна використовувати метод unshift(). Для додавання елементів в кінець масиву - метод push().',
  },
  {
    question: 'Яка різниця між undefined та is not defined?',
    answer:
      'Undefined - це значення, яке надається оголошеній, але не ініціалізованій змінній. Ми отримуємо undefined при доступі до існуючої змінної. У випадку доступу до неіснуючої (неоголошеної) змінної ми отримуємо помилку "is not defined".',
  },
  {
    question: 'Що таке підняття (hoisting) в JavaScript?',
    answer:
      'Підняття - це поведінка компілятора JavaScript, коли оголошення змінних і функцій переміщаються на верхній рівень їхньої області видимості. Завдяки підняттю ми можемо використовувати функції та змінні до їх оголошення в коді.',
  },
  {
    question: 'Яка різниця між виразом функції та оголошенням функції?',
    answer:
      'Функції - це значення. Їх можна присвоювати, копіювати або оголошувати в іншому місці коду. Якщо функцію оголошено як окремий оператор у головному потоці коду, це називається оголошенням функції (Function Declaration). Якщо функцію створено як частину виразу, це вважається виразом функції (Function Expression). Оголошення функцій обробляються перед виконанням блоку коду і видимі в усьому блоку. Функції, оголошені за допомогою виразів функцій, створюються лише тоді, коли потік виконання досягає їх.',
  },
  {
    question: 'Що таке функція в JavaScript?',
    answer:
      'Функція - це "підпрограма", яку можна викликати з іншого (або внутрішнього, у випадку рекурсії) коду відносно функції. Функція складається з послідовності операторів, які називаються тілом функції. До функції можуть передаватися значення, і функція може повертати значення.',
  },
  {
    question: "Що таке 'this' в JavaScript?",
    answer:
      "'this' посилається на об'єкт області видимості під час виконання коду. За замовчуванням 'this' вказує на глобальний об'єкт. У браузері вираз 'this === window' буде true.",
  },
  {
    question: 'Як працює прототипне спадкування?',
    answer:
      "У JavaScript все є об'єктами. Ці об'єкти пов'язані через ланцюжки прототипів, через які спадкуються методи і властивості. При доступі до властивостей або методів об'єкта пошук спершу відбувається на самому об'єкті. Якщо властивість не знайдено, пошук спрямовується на його прототип, а потім на прототип прототипу і так далі, поки не буде знайдено бажану властивість або не закінчиться ланцюжок прототипів.",
  },
  {
    question: 'Яка різниця між null і undefined?',
    answer:
      'Null буквально означає "нічого". Undefined - це значення, яке вказує на те, що змінна була оголошена, але не була ініціалізована.',
  },
  {
    question: 'В чому різниця між forEach та map?',
    answer:
      'Різниця полягає в тому, що forEach просто ітерується по масиву і виконує задану зворотню функцію на кожній ітерації, тоді як map створює і повертає новий масив на основі вихідного масиву.',
  },
  {
    question: 'В яких випадках використовуються анонімні функції?',
    answer:
      'Анонімні функції часто використовуються як зворотні функції (callbacks).',
  },
  {
    question: 'Що таке зворотня функція (callback function)?',
    answer:
      'Зворотня функція - це функція, яка має бути виконана після завершення виконання іншої функції.',
  },
  {
    question: 'Що таке функції вищого порядку (higher-order functions)?',
    answer:
      'У JavaScript функції можуть приймати інші функції в якості аргументів і також можуть повертати функції як результати. Функції, які це роблять, називають функціями вищого порядку.',
  },
  {
    question: 'В чому різниця між операторами == та ===?',
    answer:
      "Оператор двійкового рівності (==) виконує приведення типів, тоді як оператор строгого порівняння (===) не виконує приведення типів і порівнює значення і типи об'єктів.",
  },
  {
    question:
      'В чому різниця між обіцянками (promises) та зворотними функціями (callbacks)?',
    answer:
      'Обіцянки більш гнучкі щодо обробки помилок і дозволяють уникнути "пекельних зворотних функцій" (callback hell).',
  },
  {
    question: 'В чому різниця між методами call та apply?',
    answer:
      'Обидва методи викликають початковий метод зі зміненою контекстом, але метод .call приймає параметри, розділені комами, тоді як метод .apply приймає масив параметрів.',
  },
  {
    question: 'Як працює метод bind?',
    answer:
      'Метод bind повертає функцію відносно контексту, до якого він викликається, але зі зміненим контекстом.',
  },
  {
    question: 'Що таке DOM?',
    answer:
      'DOM (Document Object Model) - це дерево всіх вузлів сторінки, які визнає браузер під час розбору HTML. DOM - це інтерфейс, який дозволяє JavaScript взаємодіяти з вмістом сторінки.',
  },
  {
    question:
      'В чому полягає різниця між async/await та обіцянками (promises)?',
    answer:
      'async створює обіцянку, а await чекає, поки обіцянка виконається. По суті, await це зручний синтаксис для then. Конструкція async/await є синтаксичним цукром.',
  },
  {
    question: 'Яка ціль використання функції fetch?',
    answer:
      "Функція fetch() використовується для відправки запитів на сервер, як GET, так і POST. Метод повертає обіцянку з об'єктом відповіді, який містить заголовки і відповідь сервера.",
  },
  {
    question: 'Що таке тернарний оператор?',
    answer:
      'Тернарний оператор працює з трьома операндами: умовою і двома виразами. Він повертає перший вираз, якщо умова істинна, і другий вираз, якщо умова хибна. Використовується як компактна заміна оператору if...else.',
  },
  {
    question: 'В чому різниця між циклом while та do-while?',
    answer:
      'Цикл while перевіряє умову перед кожною ітерацією. Цикл do...while перевіряє умову після кожної ітерації.',
  },
  {
    question: "Які методи масивів ви пам'ятаєте?",
    answer: "Деякі з методів масивів, які я пам'ятаю: (перелік методів)",
  },
  {
    question: 'Які побітові оператори ви знаєте?',
    answer: 'Побітові оператори, які я знаю: (перелік побітових операторів)',
  },
  {
    question: 'Що таке Map і Set?',
    answer:
      'Map - це колекція для зберігання даних будь-якого типу у вигляді пар ключ-значення, де кожне значення зберігається з унікальним ключем, який пізніше використовується для доступу до цього значення. Ключі також можуть бути будь-якого типу. Set - це колекція для зберігання унікальних значень будь-якого типу. Те ж саме значення не може бути додано до Set більше одного разу. Set - це неупорядкована колекція, що означає, що ви можете додавати до неї елементи, але не можете отримувати їх у певному порядку. Ітерація по елементах Set можлива.',
  },
  {
    question: 'Яка різниця між звичайними функціями та стрілковими функціями?',
    answer:
      "Значення 'this' в звичайній функції динамічно залежить від контексту виклику. Стрілкові функції не мають власного 'this' і, замість цього, посилаються на 'this' оточуючої функції. Стрілкові функції не мають масиву 'arguments'. Якщо стрілкова функція містить лише одне вираження, то можливо використовувати неявний повернення без використання ключового слова 'return'. Синтаксис стрілкових функцій можна використовувати всередині класу, де 'this' буде посилатися на об'єкт класу.",
  },
  {
    question: "Що таке 'arguments'?",
    answer:
      "Об'єкт 'arguments' - це об'єкт, подібний до масиву, в JavaScript, який містить аргументи, передані в функцію.",
  },
  {
    question: "В чому різниця між класом і об'єктом в JavaScript?",
    answer:
      "Клас представляє собою опис об'єкта, його стану і поведінки, тоді як об'єкт - це конкретний екземпляр або втілення класу.",
  },
  {
    question: 'Що таке клас в JavaScript?',
    answer:
      "В JavaScript клас - це тип функції. Ключове слово 'class' використовується для оголошення класів. Класи - це синтаксичний цукор над існуючим механізмом прототипного спадку в JavaScript, починаючи з ECMAScript 6.",
  },
  {
    question: 'В чому різниця між класом і функцією-конструктором?',
    answer:
      'Класи, введені в ECMAScript 6, є синтаксичним цукром над прототипами. На практиці ці підходи відрізняються рівнем абстракції, з класами, що надають вищий рівень абстракції, тобто вам не потрібно безпосередньо працювати з прототипами.',
  },
  {
    question: 'Що таке Date?',
    answer:
      'Date - це клас, який використовується для роботи з датами і часом. Він використовується для представлення дат в різних форматах.',
  },
  {
    question: 'Як отримати поточну дату?',
    answer:
      'Ви можете використовувати метод toLocaleString(), який повертає рядок, що представляє вказану дату згідно з мовними конвенціями.',
  },
  {
    question: "Яка мета оператора 'new'?",
    answer:
      "Ключове слово 'new' в JavaScript використовується для створення екземпляра об'єкта, який містить функцію-конструктор.",
  },
  {
    question: 'Що таке інтерполяція змінних у JavaScript?',
    answer:
      'Інтерполяція змінних - це спосіб поєднання рядків, вставляючи значення змінних у рядок-шаблон за допомогою фігурних дужок. Наприклад, Привіт, ${name}!',
  },
  {
    question: 'Що таке конкатенація?',
    answer: 'Це просто операція обєднання або поєднання.',
  },
  {
    question: 'Яка мета оператора for...in?',
    answer:
      "Оператор for...in дозволяє перебирати перелічувані властивості об'єкта, включаючи властивості, успадковані від його прототипу. Перелічувані властивості - це властивості, які розробник додає до об'єкта. Вбудовані властивості, такі як властивість length масиву, не перебираються в циклі for...in.",
  },
  {
    question: 'Чому typeof null === object?',
    answer:
      'Насправді це баг мови, ймовірно, не буде виправлений через сумісність з попередніми версіями.',
  },
  {
    question: 'Чи можете ви коротко пояснити Symbol?',
    answer:
      'Symbol - це примітивний тип даних, який використовується для створення унікальних ідентифікаторів. Навіть якщо символи мають однакову назву, вони є різними символами. Символи мають два основних застосування: створення "прихованих" властивостей об\'єкта і змінення вбудованої поведінки деяких обєктів.',
  },
  {
    question: 'Що таке обєкт Proxy в JavaScript?',
    answer:
      "Proxy - це спеціальний об'єкт, який має \"повноваження діяти від імені іншого\". Об'єкт Proxy дозволяє створювати проксі для іншого об'єкта і перехоплювати або переопреділяти фундаментальні операції для цього об'єкта.",
  },
  {
    question: 'Що таке AJAX?',
    answer:
      "AJAX означає Asynchronous JavaScript and XML (Асинхронний JavaScript і XML). Це вказує на набір можливостей для відправлення запитів на сервер. Незважаючи на наявність літери X (від XML) в назві, не обов'язково використовувати XML. AJAX охоплює будь-яку комунікацію з сервером без перезавантаження сторінки, організовану за допомогою JavaScript.",
  },
  {
    question: 'Що таке JSON?',
    answer:
      "JSON (JavaScript Object Notation - Об'єктна нотація JavaScript) - це формат обміну даними, який використовується для комунікації між веб-сервером і браузером.",
  },
  {
    question: 'Що робить метод JSON.stringify()?',
    answer:
      "При відправленні даних на сервер вони повинні мати спеціальний рядковий формат JSON. Метод JSON.stringify() використовується для перетворення об'єкта в рядок у форматі JSON.",
  },
  {
    question: 'Що таке сбірщик сміття (Garbage Collector)?',
    answer:
      "Сбірщик сміття відповідає за управління пам'ятю. Основною концепцією управління памятю в JavaScript є \"досяжність\". Об'єкти вважаються досяжними, якщо до них можна звернутися або вони використовуються. Вони гарантовано знаходяться в памяті. Щоб зробити об'єкт недосяжним, всі посилання на нього повинні бути видалені. Якщо об'єкт стає недосяжним, він буде видалений з памяті.",
  },
  {
    question: 'Які значення в JavaScript вважаються "фальшивими" (falsy)?',
    answer: 'Порожній рядок, 0, null, undefined, NaN і false.',
  },
  {
    question: 'В чому різниця між атрибутами і властивостями?',
    answer:
      'Атрибут - це початковий стан при рендерингу DOM, в той час як властивість - це поточний стан.',
  },
  {
    question: 'Що таке cookies в JavaScript?',
    answer:
      'Cookies - це дані, збережені на боці клієнта і встановлені сервером. Вони часто використовуються для автентифікації.',
  },
  {
    question:
      'Для чого використовуються оператори break і continue в JavaScript?',
    answer:
      'Оператор break завершує поточну ітерацію і негайно виходить з циклу. Оператор continue завершує поточну ітерацію, але не припиняє цикл.',
  },
  {
    question: 'Яка мета використання міток (labels)?',
    answer:
      'Мітки використовуються разом з операторами break і continue. Вони діють як ідентифікатор для зовнішнього циклу або оператора switch, на який можна посилатися.',
  },
  {
    question: 'В чому різниця між параметрами і аргументами?',
    answer:
      'Аргумент - це конкретне значення, яке ми "передаємо" в функцію при її виклику. Це значення або набір значень призначається формальним параметрам функції. Параметр - це імя змінної, вказане в оголошенні функції, яке очікує на призначення конкретного значення при виклику функції. Значення, призначене параметру, є аргументом.',
  },
  {
    question: 'Що таке ланцюговий виклик функцій (function chaining)?',
    answer:
      "Ланцюжковий виклик функцій - це процес виклику кількох функцій на об'єкті в ланцюгу, одна за одною.",
  },
  {
    question: 'Що таке рекурсія?',
    answer: 'Рекурсія виникає, коли функція викликає саму себе рекурсивно.',
  },
  {
    question: 'В чому різниця між операторами spread і rest?',
    answer:
      'Оператори spread і rest мають однаковий синтаксис. Різниця полягає в їх використанні. Оператор spread дозволяє передавати або розгортати дані масиву в інші дані. Оператор rest збирає всі параметри функції в масив або виділяє певну частину параметрів.',
  },
  {
    question: 'Що таке модулі?',
    answer:
      "Модулі дозволяють об'єднувати і використовувати код з різних файлів, усуваючи необхідність утримувати весь код в одному великому файлі.",
  },
  {
    question: 'Що ви знаєте про генератори?',
    answer:
      'Генератори - це тип функцій в JavaScript. Вони відрізняються від звичайних функцій тим, що можуть призупиняти своє виконання, повертати проміжний результат і пізніше відновлювати виконання на довільному етапі.',
  },
  {
    question: 'Що таке двигун V8?',
    answer:
      'V8 Engine - це відкрите програмне забезпечення, розроблене компанією Google і написане мовою програмування C++. Воно використовується в середовищі Node.js. Для досягнення високої швидкості виконання програм, V8 перекладає код JavaScript в більш ефективний машинний код без використання інтерпретатора.',
  },
  {
    question: 'Що таке перетворення типів у JS?',
    answer:
      'Перетворення типів - це процес перетворення значень з одного типу в інший (наприклад, з рядків у числа) в JavaScript.',
  },
  {
    question: 'Що таке каррінг (currying) в JS?',
    answer:
      'Каррінг - це перетворення функцій з кількома аргументами в послідовність вкладених функцій, кожна з яких приймає один аргумент. Після виклику такої функції з аргументом вона повертає нову функцію, яка очікує наступний аргумент і так далі, до досягнення результату.',
  },
  {
    question: 'Яка роль оператора try...catch?',
    answer:
      'Оператор try...catch дозволяє виконувати довільний код, але якщо в ньому виникає помилка, програма не припиняє свого виконання. Замість цього вона переходить до блоку catch, де помилку можна обробити.',
  },
  {
    question: 'Що таке поліфіл (polyfill)?',
    answer:
      'Поліфіл - це фрагмент коду, який дозволяє використовувати сучасні функції в старших браузерах, які не підтримують їх за замовчуванням.',
  },
  {
    question: 'Що таке дерево (tree) в контексті "tree shaking"?',
    answer:
      'Дерево (tree) в контексті "tree shaking" вказує на ієрархічну структуру модулів і залежностей в коді. "Tree shaking" - це процес вилучення не використовуваних модулів з коду. Такі модулі не включаються в кінцеву збірку. Для визначення, які модулі використовуються, а які - ні, структура програми повинна базуватися на модулях ES6.',
  },
  {
    question: 'Що таке регулярний вираз (regular expression)?',
    answer:
      'Регулярний вираз - це послідовність символів, яка формує шаблон пошуку. Цей шаблон можна використовувати для пошуку даних у тексті, таких як підрядки в рядку.',
  },
  {
    question: 'Що таке інструмент для відлагодження (debugger)?',
    answer:
      'Інструмент для відлагодження надає доступ до функціональності відлагодження, доступної в конкретному середовищі, таку як встановлення точок зупинки і контроль точок відлагодження. Якщо функціональність відлагодження недоступна в середовищі виконання, то оператор debugger не впливає на результат виконання коду.',
  },
  {
    question: 'В чому різниця між proto і prototype?',
    answer:
      "Властивість proto (прихована внутрішня властивість [[Prototype]]) - це об'єкт, від якого екземпляр успадковує поля і методи. В протилежність до цього, prototype - це об'єкт, який використовується для створення proto при створенні екземпляру за допомогою ключового слова new.",
  },
  {
    question: 'Яка мета методу seal()?',
    answer:
      'Метод seal() використовується для "запечатування" об\'єкта, запобігаючи додаванню нових властивостей до об\'єкта і роблячи всі існуючі властивості неконфігурованими. Значення існуючих властивостей все ще можна змінювати, оскільки вони залишаються записуваними.',
  },
  {
    question: 'В чому різниця між методами freeze() і seal()?',
    answer:
      "На відміну від методу Object.freeze(), метод Object.seal() дозволяє модифікувати існуючі властивості об'єкта.",
  },
  {
    question:
      'Яка головна різниця між методами Object.keys(), Object.values() і Object.entries()?',
    answer:
      "Метод Object.keys() повертає ключі об'єкта, метод Object.values() повертає значення його властивостей, а Object.entries() повертає масив ключ/значення для кожної властивості об'єкта.",
  },
  {
    question: "Яка мета об'єкту WeakSet?",
    answer:
      'WeakSet використовується для зберігання колекції об\'єктів зі "слабкими" посиланнями. Такі об\'єкти автоматично підлягають збору сміття, коли вони стають недосяжними, що означає, що в WeakSet залишаються лише ключі.',
  },
  {
    question: 'Яка різниця між Set і WeakSet?',
    answer:
      'Головна різниця полягає в тому, що об\'єкти, зберігаються в WeakSet, мають "слабкі" посилання, тобто вони автоматично видаляються, коли стають недосяжними. Інші різниці включають:\n\n- Set може зберігати будь-які значення, а WeakSet може зберігати тільки об\'єкти.\n- У WeakSet немає властивості size.\n- У WeakSet відсутні методи clear(), keys(), values() і forEach().\n- WeakSet не є ітерабельною сутністю.',
  },
  {
    question: 'Які методи доступні в WeakSet?',
    answer:
      "WeakSet має такі методи:\n\n- add(): додає об'єкт до колекції.\n- delete(): видаляє об'єкт із колекції.\n- has(): визначає, чи існує об'єкт у колекції.\n- length(): повертає довжину колекції.",
  },
  {
    question: "Яка мета об'єкту WeakMap?",
    answer:
      'WeakMap використовується для зберігання пар ключ/значення, де ключі мають "слабкі" посилання. Такі ключі автоматично підлягають збору сміття, коли стають недосяжними.',
  },
  {
    question: 'Яка різниця між Map і WeakMap?',
    answer:
      'WeakMap має "слабкі" посилання, що означає, що ключі автоматично видаляються, коли стають недосяжними. Крім цього, Map може використовувати будь-які значення як ключі, тоді як WeakMap може використовувати тільки об\'єкти. Інші різниці включають:\n\n- У WeakMap немає властивості size.\n- У WeakMap відсутні методи clear(), keys(), values(), entries() і forEach().\n- WeakMap не є ітерабельною сутністю.',
  },
  {
    question: 'Які методи доступні в WeakMap?',
    answer:
      "WeakMap має такі методи:\n\n- set(): додає пару ключ/значення до об'єкта.\n- delete(): видаляє значення, пов'язане з певним ключем.\n- has(): визначає, чи існує значення для певного ключа.\n- get(): повертає значення, повязане з певним ключем.",
  },
  {
    question: 'Що таке аксесори (accessors)?',
    answer:
      "Аксесори - це геттери і сеттери. Геттери використовуються для отримання значень властивостей об'єкта, а сеттери - для встановлення їхніх значень.",
  },
  {
    question: 'Що таке CORS і навіщо він потрібен?',
    answer:
      'CORS (Cross-Origin Resource Sharing) - це механізм, який за допомогою додаткових HTTP-заголовків дозволяє користувачеві отримувати дозвіл на доступ до обраних ресурсів з сервера, що має інший початковий посилання, ніж поточний сайт.',
  },
  {
    question: 'Що таке XSS?',
    answer:
      'XSS (Cross-Site Scripting) - це вразливість веб-додатків, яка дозволяє впроваджувати JavaScript-код на сторінку, яка не була задумана розробниками.',
  },
]
