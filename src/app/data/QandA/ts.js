export const ts = [
  {
    question: 'Що таке TypeScript і чим він відрізняється від JavaScript?',
    answer:
      'TypeScript - це надмножина JavaScript, яка додає статичну типізацію до JavaScript. Він відрізняється від JavaScript тим, що дозволяє заздалегідь вказувати типи даних змінних, що спрощує виявлення помилок на етапі розробки.',
  },
  {
    question: 'Які переваги TypeScript надає розробникам?',
    answer:
      'Переваги TypeScript:\n- Статична типізація для виявлення помилок на етапі розробки.\n- Покращена підтримка інтегрованих середовищ розробки (IDE).\n- Покращена читабельність та підтримка коду завдяки явному вказанню типів.\n- Велика спільнота та багато доступних бібліотек.',
  },
  {
    question:
      'Як оголосити змінну в TypeScript і які типи даних підтримуються?',
    answer:
      'Для оголошення змінної в TypeScript використовується ключове слово let, const або var. Приклад: let x: number = 5;.\n\nБазові типи даних в TypeScript:\n- number (число)\n- string (рядок)\n- boolean (логічний тип)\n- null (порожній)\n- undefined (невизначений)',
  },
  {
    question: 'Як оголосити користувацький тип даних (інтерфейс) в TypeScript?',
    answer:
      'Для оголошення користувацького типу даних (інтерфейсу) в TypeScript використовується ключове слово interface. Приклад:\n\ninterface Person {\n  name: string;\n  age: number;\n}',
  },
  {
    question:
      'Які ключові слова використовуються для оголошення змінних з визначеними типами?',
    answer:
      'Для оголошення змінних з визначеними типами використовується двокрапка та вказання типу. Приклад: let x: number = 5;.',
  },
  {
    question: 'Що таке "duck typing" (типізація за формою качки) в TypeScript?',
    answer:
      '"Duck typing" (типізація за формою качки) в TypeScript означає, що тип змінної визначається не явно, а за її структурою. Якщо об\'єкт має ті ж властивості та методи, що і очікуваний тип, він вважається сумісним з цим типом.',
  },
  {
    question:
      "Який оператор використовується для необов'язкових властивостей в інтерфейсах?",
    answer:
      "Для необов'язкових властивостей в інтерфейсах використовується питальний знак ?.",
  },
  {
    question: 'Які типи даних підтримуються в масивах в TypeScript?',
    answer:
      'Масиви в TypeScript можуть містити елементи різних типів даних, або ж можна вказати конкретний тип даних для елементів масиву. Приклад:\n\nlet numbers: number[] = [1, 2, 3];\nlet names: string[] = ["Alice", "Bob"];',
  },
  {
    question:
      'Що таке перечислення (enums) в TypeScript і як їх використовувати?',
    answer:
      'Перечислення (enums) в TypeScript - це набір іменованих числових констант. Вони використовуються для створення обмеженого набору значень, наприклад, днів тижня чи місяців.',
  },
  {
    question: 'Які твердження (assertions) можна використовувати в TypeScript?',
    answer:
      'Твердження (assertions) в TypeScript дозволяють вказати TypeScript, що ви впевнені у типі змінної, навіть якщо TypeScript не може це визначити. Приклад:\n\nlet value: any = "Hello, TypeScript!";\nlet length: number = (value as string).length; // Приведення типу',
  },
  {
    question:
      'Що таке загальні типи (generics) і для чого вони використовуються?',
    answer:
      'Загальні типи (generics) в TypeScript використовуються для створення компонентів, які можуть працювати з різними типами даних. Вони дозволяють параметризувати типи всередині класів, функцій та інтерфейсів.',
  },
  {
    question:
      'Як описати функцію з визначеними типами параметрів та поверненого значення?',
    answer:
      'Для опису функції з визначеними типами параметрів та поверненого значення використовуються анотації типів. Приклад:\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}',
  },
  {
    question: 'Які анотації типів можна застосовувати до аргументів функції?',
    answer:
      'До аргументів функції можна застосовувати анотації типів, наприклад, вказати, що аргумент повинен бути числом (number), рядком (string) і т.д.',
  },
  {
    question: 'Що таке приведення типів (type casting) в TypeScript?',
    answer:
      "Приведення типів (type casting) в TypeScript дозволяє явно вказати, який тип даних повинен мати об'єкт або змінна. Це робиться за допомогою операторів as або <тип>.",
  },
  {
    question: 'Які типи помилок можуть виникнути при використанні TypeScript?',
    answer:
      'Помилки, які можуть виникнути при використанні TypeScript:\n- Помилки типів (Type Errors).\n- Помилки часу виконання через невідповідність очікуваних типів і фактичних значень.',
  },
  {
    question: 'Що таке "strict" режим в TypeScript і як він впливає на код?',
    answer:
      '"Strict" режим в TypeScript включає всі строгі правила перевірки типів і робить код більш безпечним. Він впливає на те, як TypeScript обробляє приведення типів, неявне оголошення змінних та інші аспекти коду.',
  },
  {
    question: 'Як працює система модулів (modules) в TypeScript?',
    answer:
      'Система модулів (modules) в TypeScript дозволяє організовувати код в окремі файли і імпортувати їх в інші файли за допомогою ключових слів import та export.',
  },
  {
    question: 'Як імпортувати і експортувати модулі в TypeScript?',
    answer:
      'Для імпорту та експорту модулів в TypeScript використовуються ключові слова import і export.',
  },
  {
    question: 'Як обробляти винятки (exceptions) в TypeScript?',
    answer:
      'Для обробки винятків (exceptions) в TypeScript можна використовувати конструкцію try-catch.',
  },
  {
    question:
      'Що таке асинхронне програмування і як TypeScript підтримує асинхронні операції?',
    answer:
      'Асинхронне програмування в TypeScript підтримується за допомогою обіцянок (promises) і ключових слів async та await.',
  },
  {
    question:
      'Які типи даних використовуються для роботи з обіцянками (promises) в TypeScript?',
    answer:
      'Типи даних для роботи з обіцянками в TypeScript:\n- Promise<T>: Обіцянка з результатом типу T.\n- async function: Функції, які повертають обіцянку.',
  },
  {
    question: 'Як працює асинхронна функція (async/await) в TypeScript?',
    answer:
      'Асинхронна функція (async/await) дозволяє писати асинхронний код більш зрозуміло та читабельно, використовуючи ключове слово async для оголошення функції та await для очікування виконання асинхронних операцій.',
  },
  {
    question:
      'Що таке декоратори (decorators) в TypeScript і як вони використовуються?',
    answer:
      'Декоратори (decorators) в TypeScript використовуються для додавання метаданих до класів і їх членів. Вони часто використовуються в фреймворках, таких як Angular.',
  },
  {
    question:
      'Як забезпечити статичну типізацію бібліотек, написаних на JavaScript, в TypeScript?',
    answer:
      'Для статичної типізації бібліотек, написаних на JavaScript, в TypeScript можна створювати файли оголошень (declaration files) з розширенням .d.ts, де описуються типи і інтерфейси для JavaScript коду.',
  },
  {
    question:
      'Як управляти версією TypeScript у проекті і які інструменти підходять для цього?',
    answer:
      'Управління версією TypeScript у проекті відбувається через встановлення відповідної версії TypeScript за допомогою npm або yarn. Інструменти для управління версіями включають npm, yarn і nvm.',
  },
  {
    question:
      'Які найкращі практики слід дотримуватися при розробці на TypeScript?',
    answer:
      'Найкращі практики при розробці на TypeScript включають в себе наступне:\n- Дотримання стандартів і рекомендацій TypeScript.\n- Використання строгого режиму ("strict") для більшої безпеки.\n- Документування коду за допомогою JSDoc коментарів.\n- Тестування і обробка помилок.',
  },
  {
    question:
      'Які інструменти і середовища розробки підходять для роботи з TypeScript?',
    answer:
      'Для роботи з TypeScript добре підходять інтегровані середовища розробки (IDE) такі як Visual Studio Code і WebStorm. Вони забезпечують підсвічування синтаксису, автодоповнення і перевірку типів.',
  },
  {
    question:
      'Як забезпечити сумісність TypeScript з різними версіями JavaScript?',
    answer:
      'Для забезпечення сумісності TypeScript з різними версіями JavaScript можна використовувати компіляцію TypeScript у цільову версію JavaScript за допомогою налаштувань компілятора TypeScript (tsconfig.json).',
  },
]
