export const git = [
  {
    question:
      'Що таке система контролю версій, і яку роль вона виконує в розробці програмного забезпечення?',
    answer:
      'Система контролю версій (VCS) - це інструмент, який використовується для відстеження змін у файловій системі та історії змін у програмному коді. У розробці програмного забезпечення вона допомагає команді розробників спільно працювати над проектом, відслідковувати зміни, вирішувати конфлікти та відновлювати попередні версії коду.',
  },
  {
    question:
      'Які основні переваги використання Git у порівнянні з іншими системами контролю версій?',
    answer:
      "Основні переваги Git порівняно з іншими системами контролю версій:\n1. Розподілена структура: кожен розробник має повну копію репозиторію, що дозволяє працювати офлайн та швидко вносити зміни.\n2. Гібка гілкування: легко створювати та об'єднувати гілки для розвитку функцій та вирішення завдань.\n3. Швидкість та ефективність: Git оптимізований для швидкого виконання операцій зі змінами та зменшення обсягу даних.\n4. Можливість відновлення: можливість легко відновлювати видалені або втрачені файли та коміти.",
  },
  {
    question: 'Як створити новий репозиторій Git за допомогою команди?',
    answer:
      'Для створення нового репозиторію Git використовуйте команду - git init',
  },
  {
    question: 'Що таке коміт (commit) у Git і як його створити?',
    answer:
      'Коміт (commit) у Git - це фіксація змін у репозиторії з коментарем. Щоб створити коміт, використовуйте команди:\n1. git add <файли>\n2. git commit -m "Опис змін"',
  },
  {
    question: 'Як переглянути список комітів в репозиторії?',
    answer: 'git log',
  },
  {
    question: 'Як відкатити зміни до попереднього коміту у Git?',
    answer: 'git reset HEAD~1',
  },
  {
    question: 'Що таке гілка (branch) в Git і як створити нову гілку?',
    answer:
      "Гілка (branch) в Git - це відокремлений шлях розвитку в репозиторії. Для створення нової гілки використовуйте команду: git branch <ім'я гілки>",
  },
  {
    question: 'Які основні операції з гілками в Git?',
    answer:
      "Основні операції з гілками в Git включають:\n1. Створення гілок\n2. Переключення між гілками (git checkout)\n3. Об'єднання гілок (git merge)\n4. Видалення гілок (git branch -d)",
  },
  {
    question: "Як об'єднати гілки в Git за допомогою команди merge?",
    answer: 'git merge <назва гілки>',
  },
  {
    question: "Як об'єднати гілки в Git за допомогою команди rebase?",
    answer: 'git rebase <назва гілки>',
  },
  {
    question: "Як вирішити конфлікти при об'єднанні гілок в Git?",
    answer:
      "Для вирішення конфліктів при об'єднанні гілок в Git, відкрийте файли, що містять конфлікти, вручну вирішіть конфлікти, після чого використайте git add для додавання змін до стейджу, і завершіть об'єднання за допомогою git commit.",
  },
  {
    question:
      "Як створити копію репозиторію на локальному комп'ютері за допомогою команди clone?",
    answer: 'git clone <URL репозиторію>',
  },
  {
    question:
      'Як відправити зміни до віддаленого репозиторію за допомогою команди push?',
    answer: 'git push',
  },
  {
    question:
      'Як отримати зміни з віддаленого репозиторію за допомогою команди pull?',
    answer: 'git pull',
  },
  {
    question: "Як видалити файл з репозиторію та відслідковуваного об'єкта?",
    answer: 'git rm <ім\'я файлу>\ngit commit -m "Видалено файл"',
  },
  {
    question: 'Як перейти до конкретного коміту за його хешем в Git?',
    answer: 'git checkout <хеш коміту>',
  },
  {
    question:
      'Які команди допомагають перевірити статус робочої директорії та репозиторію?',
    answer:
      'Команда git status допомагає перевірити статус робочої директорії та репозиторію.',
  },
  {
    question: 'Як змінити опис (коментар) до коміту після його створення?',
    answer: 'git commit --amend -m "Новий опис"',
  },
  {
    question:
      'Як створити та застосувати gitignore-файл для виключення файлів і каталогів з контролем версій?',
    answer:
      'Для створення та застосування gitignore-файлу для виключення файлів і каталогів з контролем версій, створіть файл .gitignore і внесіть в нього правила виключення.',
  },
  {
    question: 'Які основні принципи роботи з віддаленими репозиторіями у Git?',
    answer:
      "Основні принципи роботи з віддаленими репозиторіями у Git включають відправку (push) та отримання (pull) змін, створення та об'єднання гілок на віддаленому репозиторії та спільну роботу з іншими розробниками.",
  },
  {
    question:
      "Як налаштувати авторизацію за допомогою SSH для з'єднання з віддаленими репозиторіями?",
    answer:
      "Для налаштування авторизації за допомогою SSH для з'єднання з віддаленими репозиторіями, згенеруйте SSH-ключі та додайте їх до вашого облікового запису на платформі та/або до вашого Git-клієнта.",
  },
  {
    question: 'Як переглянути історію змін файлу в Git?',
    answer: "git log -- <ім'я файлу>",
  },
  {
    question:
      'Як виправити помилковий коміт (наприклад, забутий файл або неправильний коментар)?',
    answer:
      'Для виправлення помилкового коміту використовуйте команду git commit --amend.',
  },
  {
    question: 'Як злити лише певні коміти з однієї гілки в іншу (cherry-pick)?',
    answer:
      'Для злиття лише певних комітів з однієї гілки в іншу використовуйте команду git cherry-pick.',
  },
  {
    question: 'Як створити видачу (release) в Git і чому це корисно?',
    answer:
      'Для створення видачі (release) в Git, створіть тег з версією вашого проекту та опублікуйте його.',
  },
  {
    question:
      'Як перейти до попередньої версії репозиторію за допомогою тегів (tags)?',
    answer: 'git checkout <назва тегу>',
  },
  {
    question: 'Як знайти внесені зміни між двома гілками (branch diff)?',
    answer:
      'Для знаходження внесених змін між двома гілками використовуйте команду git diff <гілка1>..<гілка2>.',
  },
  {
    question: "Як видалити гілку після її об'єднання із головною гілкою?",
    answer: 'git branch -d <назва гілки>',
  },
  {
    question: 'Чим відрізняються merge rebase та cherry pick?',
    answer:
      "Основні відмінності між merge, rebase та cherry-pick:\nMerge (злиття):\nСтворює новий коміт, який об'єднує зміни з іншої гілки в поточну.\nЗберіга історію змін з обох гілок.\nЗазвичай використовується для об'єднання функціональних робіт або гарячихфіксів.\nRebase (перебазування):\nПереміщує поточну гілку на вершину гілки, з якою ви перебазовуєтеся.\nНе створює додаткових комітів об'єднання.\nЦе переписує історію комітів і може призвести до гарної лінійної історії.\nCherry-pick (вибіркове злиття):\nКопіює окремий коміт з однієї гілки і застосовує його до поточної гілки.\nСтворює новий коміт з обраними змінами без зміни історії гілки.\nВикористовується, коли потрібно взяти окремий коміт з однієї гілки та застосувати його в іншій без злиття всієї гілки.",
  },
]
