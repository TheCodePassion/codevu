export const dou1 = [
  {
    question: 'Що таке Node.js?',
    answer:
      'Node.js - це вільна та відкрита платформа, яка базується на JavaScript і використовується для створення серверних застосунків та мережевих додатків.',
  },
  {
    question: 'Які основні переваги та недоліки використання Node.js?',
    answer:
      'Переваги Node.js: Висока швидкодія завдяки однопотоковому, подійно-орієнтованому архітектурному підходу. Можливість використовувати JavaScript як мову ядра для серверної та клієнтської сторінки. Велика спільнота та багатий екосистема модулів (npm). Недоліки: Менш ефективний для обчислювально-інтенсивних завдань через однопотоковий режим. Не підходить для додатків, які вимагають багатопотокового паралелізму без додаткових обгорток.',
  },
  {
    question: 'Для яких завдань Node.js не підходить?',
    answer:
      'Node.js не підходить для обчислювально-інтенсивних задач, які блокують однопотоковий івент-луп, а також для додатків, що потребують багатопотокового паралелізму без додаткових обгорток.',
  },
  {
    question: 'Які в Node.js головні компоненти?',
    answer:
      'Головні компоненти Node.js: Ядро (Core): Основний модуль, що надає базовий функціонал. Модульна система: Можливість підключати зовнішні модулі за допомогою require. V8: JavaScript-движок від Google. libuv: Крос-платформений бібліотечний шар для подій та вводу/виводу.',
  },
  {
    question:
      'Яким чином Node.js сервер здатен обробляти одночасно багато паралельних запитів від клієнтів, маючи лише один thread?',
    answer:
      'Node.js використовує неблокуючий ввід/вивід та асинхронний код для обробки багатьох паралельних запитів від клієнтів у межах одного потоку.',
  },
  {
    question:
      'Чи можна використовувати кілька потоків (threads)? За допомогою яких модулів це реалізовано?',
    answer:
      'Так, можна використовувати кілька потоків за допомогою модуля cluster, який дозволяє створювати кілька процесів Node.js, кожен з власним потоком.',
  },
  {
    question: 'Node.js інтерпретує чи компілює код програми?',
    answer: 'Node.js інтерпретує код програми.',
  },
  {
    question: 'Як зчитувати великі файли за допомогою Node.js?',
    answer:
      "Великі файли можна зчитувати частинами, використовуючи fs.createReadStream() для збереження пам'яті та оптимізації продуктивності.",
  },
  {
    question: 'Що таке libuv і v8? Яке їхнє призначення?',
    answer:
      'libuv - це бібліотека, що забезпечує асинхронний ввід/вивід та підтримку подій у Node.js. V8 - це движок JavaScript, розроблений Google, який використовується для виконання JavaScript-коду в Node.js.',
  },
  {
    question:
      'Яка різниця між microtasks і macrotasks? Наведіть приклади таких завдань.',
    answer:
      'Microtasks - це завдання, які виконуються після завершення поточного стеку викликів JavaScript, наприклад, через Promise.then(). Macrotasks - це завдання, які ставляться в чергу та виконуються після завершення поточного стеку викликів JavaScript, наприклад, через setTimeout().',
  },
  {
    question: 'Що таке стрим (stream)?',
    answer:
      "Стрім (stream) - це концепція для обробки потокових даних, які можна читати або записувати частинами, не завантажуючи всі дані в пам'ять.",
  },
  {
    question: 'Які види стрімів ви знаєте?',
    answer:
      'Є різні види стрімів, такі як Readable, Writable, Duplex і Transform, які можуть бути використані для різних операцій читання та запису даних.',
  },
  {
    question: 'Що таке event loop? З яких компонентів складається і як працює?',
    answer:
      'Event loop - це механізм виконання асинхронного коду в Node.js. Він складається з різних фаз, таких як фаза таймерів, фаза подій та інші, і керує виконанням операцій відповідно до пріоритету та доступності ресурсів.',
  },
  {
    question: 'Що таке логування і моніторинг?',
    answer:
      'Логування (logging) - це процес записування подій та даних в журнали для моніторингу та аналізу роботи додатка. Моніторинг (monitoring) - це процес збору та аналізу даних про продуктивність та стан системи для забезпечення її ефективності та доступності.',
  },
  {
    question: 'Чим відрізняється моноліт від мікросервісу?',
    answer:
      'Моноліт - це архітектурний підхід, в якому весь додаток розташований в одному монолітному блоку коду. Мікросервіс - це архітектурний підхід, в якому додаток розбивається на невеликі, автономні сервіси, які комунікують між собою.',
  },
  {
    question:
      'В чому різниця між такими ключовими словами мови, як string і String?',
    answer:
      "string - це примітивний тип даних для роботи з текстовими рядками в JavaScript, а String - це об'єкт, який надає методи для роботи з рядками.",
  },
  {
    question: 'Для чого використовують middleware?',
    answer:
      'Middleware використовуються для обробки HTTP-запитів та відповідей перед тим, як вони потрапляють до обробника запиту (route handler) і після його виконання. Вони дозволяють виконувати додаткову логіку, перевірки безпеки, аутентифікацію, журналювання і інші дії, що стосуються обробки запитів.',
  },
  {
    question: 'Як переходити з однієї middleware в іншу?',
    answer:
      'Переход від однієї middleware до іншої відбувається шляхом виклику методу next() в поточній middleware-функції. Якщо next() викликається з аргументом (наприклад, next(error)), то контроль переходить до обробника помилок (error handler).',
  },
  {
    question: 'Як пріоритизувати middleware?',
    answer:
      'Для пріоритизації middleware, вони повинні бути додані до списку middleware у порядку, в якому вони мають бути виконані. Middleware виконуються послідовно, від першого до останнього в списку. Таким чином, перший middleware буде виконаний перед останнім.',
  },
  {
    question: 'Як організувати error handler?',
    answer:
      "Для організації error handler, ви можете створити middleware-функцію, яка має чотири параметри (err, req, res, next) і викликається в разі виникнення помилки.\napp.use((err, req, res, next) => {\n  res.status(500).send('Помилка на сервері: ' + err.message);\n});",
  },
  {
    question: 'Що таке асинхронність і асинхронний код?',
    answer:
      'Асинхронність в програмуванні означає виконання операцій без очікування завершення попередніх операцій. Асинхронний код дозволяє виконувати завдання паралельно та не блокує виконання інших операцій.',
  },
  {
    question:
      'Яка відмінність між var, let і const? Чому варто використовувати const, якщо змінна не буде змінюватися далі в коді?',
    answer:
      'Відмінність між var, let і const:\nvar є функціонально обмеженим змінним, видимим у межах функції, тоді як let і const мають блочну видимість.\nlet можна змінювати після ініціалізації, а const не можна.\nВикористання const: Якщо змінна не буде змінюватися після ініціалізації, варто використовувати const, щоб покращити читабельність і уникнути помилок.',
  },
  {
    question: 'Як відкласти виконання функції на конкретний час?',
    answer:
      'Використовуйте setTimeout або setInterval для відкладення виконання функції.',
  },
  {
    question: 'Які ви знаєте способи оголошення функції?',
    answer:
      'Функції можна оголосити за допомогою function declaration, function expression, і стрілкових функцій.',
  },
  {
    question: 'Що таке анонімна функція?',
    answer:
      'Анонімна функція - це функція без імені. Вона може бути оголошена або передана як аргумент в іншу функцію.',
  },
  {
    question: 'Наведіть приклади функції, що самовикликається.',
    answer:
      '(function() {\n  // Ваш код\n})();\n\n(() => {\n  // Ваш код\n})();',
  },
  {
    question: 'У чому різниця між function expression і function declaration?',
    answer:
      "Function declaration об'являє функцію у виді function functionName() {} і може викликатися перед оголошенням. Function expression - це оголошення функції як змінної, і вона доступна тільки після оголошення.",
  },
  {
    question:
      'Як з JS масиву чисел отримати інший масив, де залишаться тільки числа понад 10? Яку функцію масиву для цього використовувати?',
    answer: 'const filteredNumbers = numbers.filter(num => num > 10);',
  },
  {
    question: 'Як видалити елемент масиву та об’єкта?',
    answer:
      "Для видалення елемента з масиву використовуйте методи splice() або pop(). Для видалення елемента з об'єкта використовуйте delete.",
  },
  {
    question: 'Для чого призначений тип void?',
    answer: 'Тип void вказує, що функція не повертає значення.',
  },
  {
    question: 'Де і для чого використовують super()?',
    answer:
      'super() використовується в класах у JavaScript для виклику конструктора батьківського класу.',
  },
  {
    question: 'Для чого потрібен this і в яких випадках його використовувати?',
    answer:
      "this вказує на поточний об'єкт у JavaScript і використовується для доступу до властивостей та методів об'єкта.",
  },
  {
    question: 'Що таке NaN і як його використати?',
    answer:
      'NaN - це спеціальне значення, що вказує на "не число". Для перевірки на NaN використовуйте isNaN() або Number.isNaN().',
  },
  {
    question: 'Що таке NPM? Які аналоги ви знаєте?',
    answer:
      'NPM (Node Package Manager) - це пакетний менеджер для Node.js. Його аналогами є Yarn і PNPM.',
  },
  {
    question: 'В чому переваги і недоліки NPM проти Yarn/PNPM?',
    answer:
      'NPM: Офіційний пакетний менеджер Node.js, широко підтримується.\nYarn: Швидший завантаження пакетів, кешування, локсери.\nPNPM: Швидше завантаження та менше дискового простору завдяки спільному кешуванню.',
  },
  {
    question: 'Які методи Promise API ви знаєте? Яка різниця між ними?',
    answer:
      'Методи Promise API: then(), catch(), finally(). Різниця: then() обробляє успішний результат, catch() обробляє помилки, finally() виконується незалежно від результату.',
  },
  {
    question: 'Наведіть структуру HTTP request/response.',
    answer:
      'HTTP Request: Метод, URL, HTTP версія, заголовки, тіло запиту.\nHTTP Response: HTTP версія, статус код, заголовки, тіло відповіді.',
  },
  {
    question: 'Що таке new Set() і new Map()?',
    answer:
      'new Set() створює колекцію унікальних значень, а new Map() - структуру ключ-значення.',
  },
  {
    question:
      'Що таке логічний оператор && та || і чим відрізняються ці оператори від логічного оператора «??».',
    answer:
      'Логічні оператори && і || - використовуються для виконання логічних операцій. Логічний оператор ?? (nullish coalescing) використовується для вибору значення, якщо лівий операнд не є null або undefined.',
  },
  {
    question: 'Для чого потрібні бази даних у застосунках?',
    answer:
      'Бази даних у застосунках потрібні для зберігання, організації та доступу до даних. Вони дозволяють зберігати інформацію у структурованому вигляді та ефективно здійснювати операції з нею, такі як додавання, оновлення та видалення даних.',
  },
  {
    question: 'Що таке ORM і для чого її використовують?',
    answer:
      "ORM (Object-Relational Mapping) - це технологія, що використовується для взаємодії між об'єктно-орієнтованим програмуванням і реляційними базами даних. Вона дозволяє робити операції з даними у базі даних, використовуючи об'єктно-орієнтований підхід, замість роботи з SQL-запитами напряму.",
  },
  {
    question: 'Що таке міграція даних? Для чого вона потрібна?',
    answer:
      'Міграція даних - це процес зміни схеми бази даних або перенесення даних з одного стану до іншого. Вона потрібна для оновлення або зміни структури бази даних без втрати даних і забезпечення сумісності з новими версіями програми.',
  },
  {
    question: 'Що таке транзакція?',
    answer:
      'Транзакція - це логічна одиниця роботи з базою даних, яка складається з одного або декількох SQL-операцій. Транзакція вимагає, щоб всі операції були виконані успішно, інакше вони будуть відмінені (rollback), забезпечуючи цілісність даних.',
  },
  {
    question: 'Як оновити значення колонки в таблиці?',
    answer: 'UPDATE Users SET вік = 30 WHERE id = 1;',
  },
  {
    question:
      'За допомогою чого можна відфільтрувати таблицю Users за параметром віку?',
    answer: 'SELECT * FROM Users WHERE вік > 25;',
  },
  {
    question: 'Що таке Cross-Origin Resource Sharing (CORS)? Де трапляється?',
    answer:
      'Cross-Origin Resource Sharing (CORS) - це механізм безпеки веб-браузера, який обмежує веб-сайти у взаємодії з ресурсами (наприклад, запитами Ajax) з інших доменів або піддоменів. Він визначає, як дозволити або заборонити запити з інших джерел на ваш веб-сервер.',
  },
  {
    question: 'Як отримати помилку CORS у консолі розробника?',
    answer:
      'Помилку CORS можна побачити у консолі розробника браузера, зазвичай в розділі "Console" або "Network". Вона виглядає, як повідомлення про помилку, яке вказує на відхилення запиту через політику CORS.',
  },
  {
    question: 'Назвіть основні HTTP-методи RESTful або CRUD застосунків.',
    answer:
      'Основні HTTP-методи RESTful або CRUD застосунків:\nCREATE (створення): POST\nREAD (читання): GET\nUPDATE (оновлення): PUT або PATCH\nDELETE (видалення): DELETE',
  },
  {
    question: 'Що таке DNS?',
    answer:
      "DNS (Domain Name System) - це розподілена система для перетворення доменних імен (наприклад, example.com) на IP-адреси, які використовуються комп'ютерами для ідентифікації серверів у мережі Інтернет. DNS допомагає людям використовувати зрозумілі доменні імена замість числових IP-адрес, щоб звертатися до веб-сайтів та інших ресурсів.",
  },
  {
    question:
      'Які способи центрування елемента по горизонталі і вертикалі ви знаєте?',
    answer:
      'Горизонтально: margin: 0 auto; для блок-елементу із заданою шириною, text-align: center; для текстового контенту. Вертикально: Використання display: flex; і align-items: center; або justify-content: center;, або використання позиціонування (position: absolute; з top: 50%; та transform: translateY(-50%);) для елемента всередині контейнера.',
  },
  {
    question:
      'Як звернутися до всіх посилань, у яких в атрибуті в кінці посилання href є «.com»? Як приховати такі посилання?',
    answer: 'const links = document.querySelectorAll("a[href*=\'.com\']");',
  },
  {
    question:
      'Чи можна через HTML + CSS зробити фіксацію кліку? Наведіть приклад.',
    answer:
      'HTML та CSS не забезпечують фіксацію кліку. Фіксація кліку зазвичай реалізовується за допомогою JavaScript, наприклад:\nconst button = document.getElementById("myButton");\nbutton.addEventListener("click", function() {\n  // Код для обробки кліку тут\n});',
  },
  {
    question: 'Що таке «схлопування»?',
    answer:
      '"Схлопування" (margin collapsing) відбувається, коли верхні та нижні марджини двох сусідніх блок-елементів зіткнуться, і результатуючий марджин буде рівним більшому з них.',
  },
  {
    question:
      'Якою буде відстань між цими двома елементами:\n<div style=”display: block”>\n  <div style=”margin-bottom: 25px”>AAA</div>\n  <div style=”margin-top: 21px”>BBB</div>\n</div>\nЧи зміниться відповідь, якщо змінити display: block на display: flex?',
    answer:
      'Відстань між елементами буде 25px, оскільки верхній марджин блоку "BBB" зіткнеться з нижнім марджином блоку "AAA". Зміна display: block на display: flex не змінить відповідь, оскільки margin collapsing не відбувається в контексті flex-контейнера.',
  },
  {
    question:
      'Чому розробники рекомендують записувати під’єднання перед закриттям body? Що буде, якщо прописати JS-код в head?',
    answer:
      'Розробники рекомендують підключати скрипти перед закриттям </body> тега, оскільки це покращує швидкість завантаження сторінки. Якщо JS-код розмістити в <head>, він буде виконуватися до завершення завантаження DOM, що може призвести до затримок для користувача.',
  },
  {
    question:
      'Для чого використовують атрибут tabindex? Де його використовують?',
    answer:
      'Атрибут tabindex вказує порядок фокусування елементів при навігації за допомогою клавіш "Tab" на клавіатурі. Він використовується для визначення, який елемент буде першим, другим і так далі, при фокусуванні на них. Зазвичай використовується для покращення доступності сторінок і форм.',
  },
]
