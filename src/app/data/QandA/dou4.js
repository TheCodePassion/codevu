export const dou4 = [
  {
    question: 'Які найбільші проблеми платформи Node.js?',
    answer:
      'Найбільші проблеми платформи Node.js включають у себе залежність від одного потока, обмежену підтримку багатозадачності, і відсутність багатьох стандартних бібліотек, що є доступними в інших мовах програмування.',
  },
  {
    question:
      'Скільки потоків Node.js використовує для роботи? Яким чином можна регулювати цю кількість?',
    answer:
      'Node.js використовує один потік для роботи, але можливо використовувати більше потоків за допомогою модулів, таких як "cluster". Кількість потоків можна регулювати на рівні коду.',
  },
  {
    question:
      'Чи є в Node.js можливість виконувати скрипти, написані іншими мовами?',
    answer:
      'Node.js підтримує виконання скриптів, написаних іншими мовами, за допомогою модулів, таких як "child_process" для запуску зовнішніх програм.',
  },
  {
    question:
      'Чи є різниця у виконанні microtasks/macrotasks залежно від версій Node.js?',
    answer:
      'Різниця у виконанні microtasks/macrotasks може бути відзначена між версіями Node.js, особливо при використанні різних версій V8 та Event Loop, але це в основному стосується внутрішньої реалізації та оптимізацій.',
  },
  {
    question:
      'Як працювати із вбудованими Node.js функціями, реалізованими через callback інтерфейс в async/await стилі?',
    answer:
      'Для роботи з вбудованими Node.js функціями, реалізованими через callback інтерфейс, можна використовувати "promisify" для перетворення їх на async/await стилі або використовувати "util.promisify" для цього.',
  },
  {
    question:
      'У чому полягає різниця між require/module.exports і ES6-модулями?',
    answer:
      'Різниця між "require/module.exports" і ES6-модулями полягає в синтаксисі та підтримці ES6. Останній є більш сучасним та потужним способом організації модульної структури.',
  },
  {
    question: 'З яких стадій складається цикл event loop в libuv?',
    answer:
      'Цикл event loop в libuv складається з кількох стадій, включаючи прийом та обробку подій, виконання таймерів, перевірку стану і багато інших операцій.',
  },
  {
    question:
      'Яким чином бібліотека libuv досягає неблокуючого вводу і виводу?',
    answer:
      'Бібліотека libuv досягає неблокуючого вводу та виводу за допомогою подій та асинхронних операцій вводу-виводу, таких як "async" та "await".',
  },
  {
    question: 'Що таке гарантії доставки повідомлень та якими вони бувають?',
    answer:
      'Гарантії доставки повідомлень включають різні рівні надійності та забезпечують, що повідомлення буде доставлено і оброблено відповідним способом.',
  },
  {
    question:
      'У яких випадках ви застосували б асинхронний зв’язок між двома системами?',
    answer:
      'Асинхронний зв’язок між двома системами застосовується в ситуаціях, коли потрібно обробити запити або події в іншій системі без блокування виконання основного коду.',
  },
  {
    question: 'Чи можна замінити в V8 в Node.js?',
    answer:
      "В V8, який використовується в Node.js, можна замінити деякі складові, такі як об'єкти JavaScript, але це може вимагати глибокого розуміння роботи двигуна V8 та може бути надзвичайно складним.",
  },
  {
    question:
      'Як налаштувати логування і моніторинг? Які найкращі практики ви знаєте?',
    answer:
      'Для налаштування логування і моніторингу в Node.js можна використовувати бібліотеки, такі як Winston або Bunyan, та сервіси моніторингу, такі як Prometheus або New Relic. Найкращі практики включають в себе запис докладних логів, моніторинг ресурсів і використання інструментів для виявлення проблем.',
  },
  {
    question:
      'Як би ви використали стрими для покращення продуктивності вебзастосунку?',
    answer:
      'Для покращення продуктивності вебзастосунку можна використовувати стріми для оптимізації обробки великих обсягів даних, передачі файлів, асинхронного обміну даними між клієнтом і сервером та інших подібних завдань.',
  },
  {
    question: 'Які є способи масштабувати Node.js сервер?',
    answer:
      'Горизонтальне масштабування: Додавання більше серверів або інстансів Node.js у кластер.\nВертикальне масштабування: Підвищення ресурсів сервера, таких як CPU і RAM.\nВикористання обратного проксі (наприклад, Nginx) для розподілу трафіку між багатьма серверами Node.js.',
  },
  {
    question:
      'Які є переваги кластеризації Node.js застосунку? Які проблеми можуть виникнути?',
    answer:
      'Переваги кластеризації Node.js:\nПідвищення доступності і надійності застосунку.\nЗбільшення пропускної спроможності завдяки розподілу навантаження.\nМожливість використання багатьох CPU ядер для оптимізації продуктивності.\nПроблеми кластеризації Node.js:\nПотреба в синхронізації даних між процесами.\nСкладність у виявленні і відлагодженні помилок через паралельний виконавчий процес.',
  },
  {
    question:
      'У чому основна різниця чи схожість у роботі вебсерверів на Node.js або, наприклад, на Apache (PHP)?',
    answer:
      'Основна різниця між Node.js і Apache (PHP):\nNode.js побудований на подіях і призначений для високоефективного виконання вводу/виводу та обробки багатьох одночасних підключень завдяки асинхронному підходу.\nApache є традиційним сервером, який обробляє багато типів запитів, і часто використовує моделі обробки процесів або потоків, що може споживати більше ресурсів.',
  },
  {
    question: 'Що таке методологія Twelve-Factor App?',
    answer:
      'Twelve-Factor App - це набір принципів для розробки веб-застосунків, які забезпечують легку міграцію та масштабування. До них входять:\nКод базується на контрольній системі.\nЗалежності зовнішні та управляються.\nНалаштування розділені від коду.\nЗастосунок має бути легко запускатися в різних середовищах.',
  },
  {
    question: 'Які показники моніторингу найважливіші?',
    answer:
      "Найважливіші показники моніторингу включають:\nCPU використання.\nВикористання пам'яті.\nКількість запитів на секунду.\nЧас відгуку сервера.\nКількість помилкових запитів.\nВикористання мережевих ресурсів.",
  },
  {
    question:
      'Опишіть дизайн-паттерн SAGA. Яка різниця між транзакцією та операцією компенсації в SAGA, в SOA?',
    answer:
      'SAGA - це паттерн для управління транзакціями в розподілених системах. Основна різниця між транзакцією та операцією компенсації в SAGA полягає в тому, що транзакція - це намагання виконати операцію, тоді як операція компенсації - це спроба відмінити або виправити операцію, яка вже виконана.',
  },
  {
    question: 'Що таке авторизація та аутентифікація?',
    answer:
      'Аутентифікація - це процес перевірки ідентичності користувача (приклад: введення логіну та паролю). Авторизація - це процес визначення, чи має користувач доступ до певного ресурсу чи функціоналу після аутентифікації.',
  },
  {
    question:
      'Express vs Nest.js: які переваги і недоліки кожного фреймворку? Коли який доцільніше використовувати?',
    answer:
      'Express - легкий, мінімалістичний фреймворк для Node.js, добре підходить для швидкого розробки простих застосунків.\nNest.js - більш структурований і розширюваний фреймворк, побудований на основі TypeScript, призначений для розробки масштабованих і складних застосунків.',
  },
  {
    question: 'Що таке CLS і де варто його використовувати?',
    answer:
      'CLS - це бібліотека для Node.js, яка дозволяє зберігати дані в області видимості запиту на протязі всього життєвого циклу запиту. Використовується для передачі контексту між асинхронними функціями.',
  },
  {
    question: 'Що таке graceful shutdown? Як його імплементувати?',
    answer:
      'Graceful Shutdown - це процес закриття сервера або застосунку з врахуванням завершення всіх активних операцій та збереженням даних. Імплементується шляхом відслідковування сигналів ОС (наприклад, SIGTERM) та правильної обробки їх для завершення роботи сервера.',
  },
  {
    question:
      'Наведіть приклади імплементації GoF патернів у Node.js і фреймворках.',
    answer:
      "Приклади імплементації GoF патернів у Node.js:\n- Патерн Singleton може використовуватися для створення єдиного екземпляра сервісу або класу конфігурації.\n- Патерн Observer може бути використаний для реалізації підписки на події і сповіщення про зміни в системі.\n- Патерн Factory може бути використаний для створення об'єктів з певними параметрами.",
  },
  {
    question: 'Порівняйте MessageQ, RabbitMQ і Kafka.',
    answer:
      'Message Queue (MessageQ) - загальний термін, що описує систему для передачі повідомлень між компонентами. Не є конкретним продуктом.\nRabbitMQ - це брокер повідомлень, який використовує протокол AMQP і підходить для багатьох випадків використання.\nKafka - це потікова платформа для обробки даних в реальному часі, підходить для великих обсягів даних і сценаріїв потокової обробки.',
  },
  {
    question: 'Які проблеми розв’язує serverless?',
    answer:
      'Serverless розв’язує такі проблеми:\n- Скасування необхідності управління інфраструктурою.\n- Оптимізація витрат на обчислення за рахунок віддаленої обробки коду.\n- Автоматичне масштабування ресурсів під навантаження.\n- Забезпечення високої доступності і резервного копіювання.\n- Зменшення часу розгортання застосунків.',
  },
  {
    question:
      'З якою швидкістю витягуватимуться дані за ключем зі звичайного JavaScript об’єкта? Поясніть, що це за структура даних і як вона працює?',
    answer:
      "Витягнення даних за ключем зі звичайного JavaScript об’єкта відбувається зі швидкістю O(1), оскільки об'єкти JavaScript використовують хеш-таблиці для зберігання даних, і доступ до даних по ключу є оптимізованим.",
  },
  {
    question: 'Чим JS відрізняється від багатопотокових мов?',
    answer:
      'JavaScript відрізняється від багатопотокових мов тим, що в ньому використовується однопотокова модель виконання за рахунок подій та асинхронності замість багатопотоковості. Всі операції в одному потоці обробляються послідовно, і конкурентність досягається через асинхронність та подійну модель.',
  },
  {
    question: 'Що таке функції вищого порядку?',
    answer:
      'Функції вищого порядку - це функції, які приймають інші функції в якості аргументів або повертають функції як результат. Вони дозволяють створювати більш абстрактний та гнучкий код.',
  },
  {
    question: 'Назвіть об’єкти першого класу.',
    answer:
      "Об'єкти першого класу - це об'єкти, які можуть бути передані як аргументи функцій, присвоєні змінним, створені динамічно і зберігати у колекціях, такі як масиви чи об'єкти.",
  },
  {
    question:
      'Як зрозуміти, чи є у вашому коді/застосунку витоки пам’яті (memory leaks)?',
    answer:
      "Для виявлення витоків пам'яті в коді/застосунку можна використовувати інструменти аналізу пам'яті, такі як Chrome DevTools або Node.js Profiler. Також слід слідкувати за надмірним використанням пам'яті та непотрібними посиланнями на об'єкти.",
  },
  {
    question: 'Як працювати з асинхронною відповіддю?',
    answer:
      'Для роботи з асинхронною відповіддю в JavaScript можна використовувати проміси (Promises) або асинхронні функції (async/await). Проміси дозволяють виконувати асинхронний код і реагувати на результати його виконання.',
  },
  {
    question:
      'Як можна отримати інкапсуляцію всередині класу без використання Typescript?',
    answer:
      "Щоб отримати інкапсуляцію в JavaScript без використання TypeScript, можна використовувати замикання (closures) та об'єкти. Замикання дозволяють приховати змінні та функції внутрішньої області видимості, а об'єкти можна використовувати для створення інтерфейсів та об'єктів з приватними методами і властивостями.",
  },
  {
    question:
      'Розкажіть про ваш досвід роботи з мікросервісами в Node.js. Як ви забезпечували комунікацію між різними сервісами?',
    answer:
      'Для комунікації між мікросервісами зазвичай використовуються HTTP-запити, REST або GraphQL. Також можуть використовуватися асинхронні системи повідомлень, такі як RabbitMQ або Kafka.',
  },
  {
    question:
      'Як ви працювали з міграцією та покращенням сервісів в архітектурі мікросервісів?',
    answer:
      'Міграція мікросервісів включає в себе розгортання нових версій сервісів з мінімальними перебоями у роботі. Для цього можуть використовуватися інструменти, які дозволяють поступово впроваджувати зміни, такі як Docker та Kubernetes.',
  },
  {
    question:
      'Як би ви підходили до тестування та дебагу застосунку з мікросервісною архітектурою у Node.js?',
    answer:
      'Тестування мікросервісів включає в себе їх ізольоване тестування, одиниць інтеграції та валідацію змінних величин. Для дебагу можна використовувати логи, інструменти моніторингу та інструменти для трасування запитів.',
  },
  {
    question:
      'Як би ви впоралися зі збоями в розподіленій системі (Failed message processing, dead letter queue)?',
    answer:
      'Збої можуть виникнути через різні причини, включаючи помилки в коді, перевищення обсягу запитів та інші фактори. Для їх управління можуть використовуватися dead letter queues або інші механізми обробки помилок.',
  },
  {
    question:
      'Які патерни для побудови мікросервісної архітектури ви використовували?',
    answer:
      'Деякі з популярних патернів включають в себе API Gateway, Circuit Breaker, Service Discovery та Event Sourcing.',
  },
  {
    question: 'Як працює gateway?',
    answer:
      "Gateway - це проксі-сервер, який служить в'їздною точкою для всіх запитів до мікросервісів, забезпечуючи маршрутизацію і контроль доступу.",
  },
  {
    question: 'Що таке CAP теорема?',
    answer:
      'CAP теорема визначає, що в розподіленій системі можна забезпечити лише дві з трьох властивостей: Consistency (послідовність), Availability (доступність) і Partition Tolerance (толерантність до розділення). Вибір залежить від потреб конкретної системи.',
  },
  {
    question:
      'Що краще: окремі бази даних для окремих мікросервісів чи одна база даних для всіх мікросервісів? Чому?',
    answer:
      'Вибір залежить від потреб та вимог конкретного проекту. Одна база даних може спростити деякі аспекти, але також може стати точкою збою і обмежити гнучкість. Використання окремих баз даних може забезпечити більшу ізоляцію, але потребує більше управління даними і комунікацією між сервісами.',
  },
  {
    question:
      'Які бувають рівні ізоляції транзакцій та чим вони відрізняються?',
    answer:
      'Рівні ізоляції транзакцій включають READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ і SERIALIZABLE. Вони відрізняються за ступенем видимості даних та можливістю блокування.',
  },
  {
    question: 'Навіщо існують рівні ізоляції транзакції? Наведіть приклади.',
    answer:
      'Рівні ізоляції транзакцій існують для керування конкурентним доступом до даних. Наприклад, SERIALIZABLE запобігає конфліктам при паралельних транзакціях, а READ UNCOMMITTED дозволяє читати незафіксовані дані.',
  },
  {
    question:
      'Що таке аномалії транзакцій (dirty read, dirty write, read skew, phantom read, lost update)?',
    answer:
      'Аномалії транзакцій:\nDirty read: Одна транзакція читає змінині, але ще не зафіксовані дані іншої.\nDirty write: Транзакція перезаписує незафіксовані дані іншої.\nRead skew: Одна транзакція читає різні версії даних в межах тієї ж транзакції.\nPhantom read: Транзакція бачить нові записи, додані іншою транзакцією, між запитами.\nLost update: Одна транзакція перезаписує дані, які були змінені іншою, інкапсулюючи зміни іншої транзакції.',
  },
  {
    question:
      'У чому різниця нормалізованих і ненормалізованих даних? Наведіть приклад, коли які краще використовувати.',
    answer:
      'Нормалізовані дані містяться в реляційних таблицях з мінімальною дублікацією, що забезпечує консистентність і ефективну зміну. Ненормалізовані дані містять дубльовану інформацію та пришвидшують запити, але можуть викликати проблеми з оновленнями та інтегритетом даних.',
  },
  {
    question: 'У чому різниця між оптимістичним та песимістичним блокуванням?',
    answer:
      'Оптимістичне блокування передбачає, що конфлікти рідко виникають і робиться перевірка на конфлікти після виконання. Песимістичне блокування передбачає блокування ресурсів до закінчення транзакції.',
  },
  {
    question: 'Навіщо потрібні індекси пошуку? Які мінуси в індексів?',
    answer:
      "Індекси пошуку допомагають швидше знаходити дані в базі даних, але займають додатковий обсяг пам'яті і ускладнють операції запису.",
  },
  {
    question: 'Що таке race condition? Можете навести приклад?',
    answer:
      'Race condition - це ситуація, коли результати виконання програми залежать від того, в якому порядку виконуються потоки. Приклад: два потоки намагаються збільшити спільну змінну на 1 без синхронізації.',
  },
  {
    question: 'Що таке реплікація? Навіщо вона потрібна?',
    answer:
      'Реплікація - це процес створення та підтримки копій бази даних для покращення доступності, швидкості та надійності.',
  },
  {
    question: 'Яка різниця між графом і деревом?',
    answer:
      "Граф може мати складну структуру зі зв'язками між елементами, в той час як дерево є особливим видом графу, де кожен елемент має одного батька.",
  },
  {
    question:
      'Чи доводилось вам робити оптимізацію перформансу за допомогою структур даних?',
    answer:
      'Так, оптимізація перформансу може включати використання ефективних структур даних, таких як індекси або кешування.',
  },
  {
    question: 'Наведіть плюси та мінуси Shared DB.',
    answer:
      'Плюси Shared DB: спрощена архітектура, спільний доступ до даних. Мінуси: обмежена масштабованість, можливість одномоментних відмов.',
  },
  {
    question: 'Що таке foreign keys і constraints у SQL базах даних?',
    answer:
      "Foreign keys і constraints - це обмеження в базах даних, які визначають зв'язки між таблицями та правила цілісності даних.",
  },
  {
    question: 'Що таке масштабування баз даних? Як це робити?',
    answer:
      'Масштабування баз даних - це процес розширення системи для обробки більшого обсягу даних або завантаження. Це може включати горизонтальний та вертикальний масштабування.',
  },
  {
    question: 'Що таке шардинг?',
    answer:
      'Шардинг - це метод масштабування бази даних, при якому дані розділяються на частини (шарди) і кожен шард обробляється окремо.',
  },
  {
    question: 'Що таке concurrent locking в базі даних?',
    answer:
      'Concurrent locking в базі даних використовується для управління доступом до ресурсів в одночасних транзакціях.',
  },
  {
    question: 'Чому властивості ACID важливі для SQL баз даних?',
    answer:
      'Властивості ACID (Атомарність, Консистентність, Ізоляція, Тривалість) важливі для гарантування надійності та цілісності даних в SQL базах даних.',
  },
  {
    question: 'Що таке eventual consistency? Які ще бувають типи узгодженості?',
    answer:
      'Eventual consistency - це модель узгодженості, де система гарантує, що в кінцевому пункті всі репліки будуть узгоджені, але це може займати час. Інші типи узгодженості включають строгу консистентність і слабку консистентність.',
  },
]
