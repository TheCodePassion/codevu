import Header from '@/app/components/Header'
export default function Node() {
  return (
    <>
      <Header />
      <div className="flex justify-center  h-screen bg-gray-100">
        <div className="bg-white shadow-md p-6 rounded-lg">
          <h1>це лише нотатка</h1>
          <p className="text-gray-700">Петля подій (Event Loop)</p>
          <br></br>
          <p className="text-gray-700">
            {' '}
            Архітектура браузера -- Користувацький інтерфейс -- Браузерний
            двигун -- Рендерний двигун -- Мережа -- Інтерпретатор JS --
            Користувацький інтерфейс (забезпечення)
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            {' '}
            Event Loop не є частиною самого JavaScript. Це механізм, який
            дозволяє виконувати операції введення/виведення без блокування. Вона
            використовує стек викликів і містить чергу завдань.
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            Event Loop забезпечує оточення (середовище).
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            Існують дві черги - черга подій (макрозавдань) і черга завдань
            (мікрозавдань). Обіцянки завжди є мікрозавданнями, близько 99% часу.
            Мікрозавдання більше Макрозавдання. Макрозавдання включають таймери,
            події та завдання, пов&#39;язані з браузером.
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            Node.js - це програмна платформа, яка дозволяє введення/виведення за
            допомогою API на мові C++. Вихідний код далі (v8 + libuv) далі
            Машинний код.
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            Node.js є однопотоковим, але libuv використовує потоки.
          </p>{' '}
          <br></br>
          <p className="text-gray-700">
            Демультиплексор подій в Node.js є частиною архітектури Node.js,
            відповідальною за управління асинхронними операціями та обробкою
            подій. Він ґрунтується на принципах однопотоковості та неблокуючого
            введення/виведення.
          </p>
          <br></br>
          <p className="text-gray-700">
            Усередині Node.js використовує Демультиплексор подій для відстеження
            різних подій, що виникають у системі, таких як мережеві операції,
            операції з файлами, таймери та інші. Демультиплексор моніторить
            різні джерела подій і повідомляє програму, коли події стаються,
            дозволяючи їй реагувати на них.
          </p>
          <br></br>
          <p className="text-gray-700">
            Коли програма Node.js запускає асинхронну операцію, таку як читання
            файлу або виконання мережевого запиту, вона реєструє функцію
            зворотного виклику, яка повинна викликатися після завершення
            операції. Демультиплексор подій починає відстежувати операцію без
            блокування основного потоку виконання. Коли операція завершується,
            демультиплексор повідомляє програму, викликаючи зареєстровану
            функцію зворотного виклику. Таким чином, програма може продовжувати
            виконувати інші завдання, не очікуючи завершення операції.
          </p>
          <br></br>
          <p className="text-gray-700">
            Демультиплексор подій в Node.js дозволяє ефективно обробляти велику
            кількість одночасних операцій та подій без блокування основного
            потоку виконання. Це основний механізм, який робить Node.js
            високопродуктивним та масштабованим при роботі з асинхронними
            операціями.
          </p>
          <br></br>
        </div>
      </div>
    </>
  )
}
